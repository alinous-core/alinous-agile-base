
/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */

The example in this directory takes an extension of Java as input and
converts it into proper Java.  The purpose of this example is to
illustrate:

1. The use of the "next" field of tokens.

2. To illustrate how one can use JJTree to build a parse tree for a
   small part of the input and ignore the rest of the file.

3. Combine 1 and 2 to process the portion for which tree nodes are
   created and leave the rest of the file unchanged.

The Java language extension handled by the grammar (ToyJava.jjt)
allows catch and finally specifications at the end of method blocks.
So the following is allowed (as an example):

	void foo() {
	  ...
	} catch (Exception e) {
	  ...
	}

The grammar file ToyJava.jjt is a modification of Java1.1.jj.  Note
how we have changed the SKIP tokens to SPECIAL_TOKENS so that the
output file is identical to the input file.

To try this out, type:

	jjtree ToyJava.jjt
	javacc ToyJava.jj
	javac *.java
	java ToyParser divide.toy divide.java

And then compare divide.java to divide.toy.
