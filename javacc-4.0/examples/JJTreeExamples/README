
/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */

JJTreeExamples

This directory contains some simple JJTree input files intended to
illustrate some of the basic ideas.  All of them are based on an
grammar to recognize arithmetic expressions built out of identifiers
and constants.

eg1.jjt

This example is just the JavaCC grammar, with a little extra code in
the parser's main method to call the dump method on the generated
tree.  It illustrates how the default behavior of JJTree will produce
a tree of non-terminals.

eg2.jjt

This example is the same grammar as eg1.jjt with modifications to
customize the generated tree.  It illustrates how unnecessary
intermediate nodes can be suppressed, and how actions in the grammar
can attach extra information to the nodes.

eg3.jjt

This example is a modification of eg2.jjt with the NODE_DEFAULT_VOID
option set.  This instructs JJTree to treat all undecorated
non-terminals as if they were decorated as #void. The default JJTree
behavior is to treat such non-terminals as if they were decorated
with the name of the non-terminal.

eg4.jjt

This is a modification of eg3.jjt with the VISITOR option set.  This
instructs JJTree to insert a jjtAccept() method into all nodes it
generates, and to produce a visitor class.  The visitor is used to
dump the tree.

Here are some instructions on how to run the examples using the Ant build scripts, and the output
you can expect to see.

eg1.jjt
-------

The only bit of JJTree-specific code is an action in the start
production that dumps the constructed parse tree when the parse is
complete.  It uses JJTree simple mode.

The input file is eg1.jjt.

$ ant eg1
Buildfile: build.xml

eg1:
    [mkdir] Created dir: /home/tom/javacc/javacc/examples/JJTreeExamples/eg1
     [copy] Copying 1 file to /home/tom/javacc/javacc/examples/JJTreeExamples/eg1
   [jjtree] Java Compiler Compiler Version 3.2 (Tree Builder)
   [jjtree] (type "jjtree" with no arguments for help)
   [jjtree] Reading from file /home/tom/javacc/javacc/examples/JJTreeExamples/eg1.jjt . . .
   [jjtree] File "/home/tom/javacc/javacc/examples/JJTreeExamples/eg1/Node.java" does not exist.  Will create one.
   [jjtree] File "/home/tom/javacc/javacc/examples/JJTreeExamples/eg1/SimpleNode.java" does not exist.  Will create one.
   [jjtree] Annotated grammar generated successfully in /home/tom/javacc/javacc/examples/JJTreeExamples/eg1/eg1.jj
   [javacc] Java Compiler Compiler Version 3.2 (Parser Generator)
   [javacc] (type "javacc" with no arguments for help)
   [javacc] Reading from file /home/tom/javacc/javacc/examples/JJTreeExamples/eg1/eg1.jj . . .
   [javacc] File "TokenMgrError.java" does not exist.  Will create one.
   [javacc] File "ParseException.java" does not exist.  Will create one.
   [javacc] File "Token.java" does not exist.  Will create one.
   [javacc] File "SimpleCharStream.java" does not exist.  Will create one.
   [javacc] Parser generated successfully.
    [javac] Compiling 11 source files to /home/tom/javacc/javacc/examples/JJTreeExamples/eg1
     [echo] *******
     [echo] ******* Now cd into the eg1 directory and run 'java eg1' ******
     [echo] *******

BUILD SUCCESSFUL
Total time: 3 seconds
[tom@hal JJTreeExamples]$ cd eg1
[tom@hal eg1]$ java eg1
Reading from standard input...
(a + b) * (c + 1);
Start
 Expression
  AdditiveExpression
   MultiplicativeExpression
    UnaryExpression
     Expression
      AdditiveExpression
       MultiplicativeExpression
        UnaryExpression
         Identifier
       MultiplicativeExpression
        UnaryExpression
         Identifier
    UnaryExpression
     Expression
      AdditiveExpression
       MultiplicativeExpression
        UnaryExpression
         Identifier
       MultiplicativeExpression
        UnaryExpression
         Integer
Thank you.

eg2.jjt
-------

This is a modification of the first example to illustrate how the
parse tree can be customized:

$ ant eg2
Buildfile: build.xml

eg2:
    [mkdir] Created dir: /home/tom/javacc/javacc/examples/JJTreeExamples/eg2
     [copy] Copying 1 file to /home/tom/javacc/javacc/examples/JJTreeExamples/eg2
     [copy] Copying 1 file to /home/tom/javacc/javacc/examples/JJTreeExamples/eg2
   [jjtree] Java Compiler Compiler Version 3.2 (Tree Builder)
   [jjtree] (type "jjtree" with no arguments for help)
   [jjtree] Reading from file /home/tom/javacc/javacc/examples/JJTreeExamples/eg2.jjt . . .
   [jjtree] File "/home/tom/javacc/javacc/examples/JJTreeExamples/eg2/Node.java" does not exist.  Will create one.
   [jjtree] File "/home/tom/javacc/javacc/examples/JJTreeExamples/eg2/SimpleNode.java" does not exist.  Will create one.
   [jjtree] File "/home/tom/javacc/javacc/examples/JJTreeExamples/eg2/ASTStart.java" does not exist.  Will create one.
   [jjtree] File "/home/tom/javacc/javacc/examples/JJTreeExamples/eg2/ASTAdd.java" does not exist.  Will create one.
   [jjtree] File "/home/tom/javacc/javacc/examples/JJTreeExamples/eg2/ASTMult.java" does not exist.  Will create one.
   [jjtree] File "/home/tom/javacc/javacc/examples/JJTreeExamples/eg2/ASTInteger.java" does not exist.  Will create one.
   [jjtree] Annotated grammar generated successfully in /home/tom/javacc/javacc/examples/JJTreeExamples/eg2/eg2.jj
   [javacc] Java Compiler Compiler Version 3.2 (Parser Generator)
   [javacc] (type "javacc" with no arguments for help)
   [javacc] Reading from file /home/tom/javacc/javacc/examples/JJTreeExamples/eg2/eg2.jj . . .
   [javacc] File "TokenMgrError.java" does not exist.  Will create one.
   [javacc] File "ParseException.java" does not exist.  Will create one.
   [javacc] File "Token.java" does not exist.  Will create one.
   [javacc] File "SimpleCharStream.java" does not exist.  Will create one.
   [javacc] Parser generated successfully.
    [javac] Compiling 16 source files to /home/tom/javacc/javacc/examples/JJTreeExamples/eg2
     [echo] *******
     [echo] ******* Now cd into the eg2 directory and run 'java eg2' ******
     [echo] *******

BUILD SUCCESSFUL
Total time: 3 seconds
[tom@hal JJTreeExamples]$ cd eg2
[tom@hal eg2]$ java eg2
Reading from standard input...
(a + b) * (c + 1);
Start
 Mult
  Add
   Identifier: a
   Identifier: b
  Add
   Identifier: c
   Integer
Thank you.

Look at eg2.jjt to see how node annotations can be used to restructure
the parse tree, and at ASTMyID.java to see how you can write your own
node classes that maintain more information from the input stream.

eg3.jjt
-------

This example can be run in the same manner as you ran eg2.jjt.

eg4.jjt
-------

This example again can be run in the same manner as you ran eg2.jjt.
