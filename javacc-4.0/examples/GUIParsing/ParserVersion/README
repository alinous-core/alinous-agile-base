
/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */

This version of the GUI parsing example defines the GUI interaction as
a JavaCC grammar using tokens that are generated by a user built token
manager.  Note that these tokens appear in the parser (CalcInput.jj)
without definitions (such as <DIGIT>, <DOT>, etc.).  JavaCC does not
require token definitions when USER_TOKEN_MANAGER is set to true.  The
token manager is implemented in TokenCollector.java to extract tokens
from a producer-consumer object in ProducerConsumer.java.  The tokens
are stuffed into ProducerConsumer.java by the GUI which is defined in
CalcGUI.java.  The whole system is invoked through Main.java.

The point of this example is to illustrate:

. How a parser can be used without the standard token manager.
. The fact that tokens can be generated by entities that are not even
  streams (a GUI in this example).
. That GUI interaction can be modeled as a grammar and this grammar
  can then be used to implement the innards of a GUI based tool.

To run the calculator (which is what this example implements), do:

	javacc CalcInput.jj
	javac *.java
	java Main
