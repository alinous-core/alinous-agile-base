/* Generated By:JavaCC: Do not edit this line. AlinousScriptParserTokenManager.java */
package org.alinous.parser.script;

@SuppressWarnings({"unused"})
public class AlinousScriptParserTokenManager implements AlinousScriptParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 155);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(0, 0);
      case 10:
         jjmatchedKind = 3;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 4;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(0, 0);
      case 33:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L, 0x0L);
      case 34:
         jjmatchedKind = 151;
         return jjMoveNfa_0(0, 0);
      case 36:
         jjmatchedKind = 26;
         return jjMoveNfa_0(0, 0);
      case 37:
         jjmatchedKind = 17;
         return jjMoveNfa_0(0, 0);
      case 38:
         jjmatchedKind = 20;
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L, 0x0L);
      case 39:
         jjmatchedKind = 152;
         return jjMoveNfa_0(0, 0);
      case 40:
         jjmatchedKind = 22;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 23;
         return jjMoveNfa_0(0, 0);
      case 42:
         jjmatchedKind = 11;
         return jjMoveNfa_0(0, 0);
      case 43:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L, 0x0L);
      case 44:
         jjmatchedKind = 28;
         return jjMoveNfa_0(0, 0);
      case 45:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L, 0x0L);
      case 46:
         jjmatchedKind = 27;
         return jjMoveNfa_0(0, 0);
      case 47:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x6000000L);
      case 58:
         jjmatchedKind = 41;
         return jjMoveNfa_0(0, 0);
      case 59:
         jjmatchedKind = 9;
         return jjMoveNfa_0(0, 0);
      case 60:
         jjmatchedKind = 38;
         return jjMoveStringLiteralDfa1_0(0x10008020000000L, 0x0L, 0x0L);
      case 61:
         jjmatchedKind = 10;
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L, 0x0L);
      case 64:
         jjmatchedKind = 31;
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L, 0x0L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0xc80000240000820L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40400000000a0004L, 0x40L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x10811000000L, 0x280L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x120001040L, 0x810L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x14800004000001L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x400800000000000L, 0x2100000000000000L, 0x421L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x8100480000000000L, 0x200000450000L, 0x2000L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L, 0x0L);
      case 75:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x28000000000000L, 0x80000800080L, 0x80000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x8000000000004400L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x202000000000000L, 0x8310L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8002002100000L, 0x40000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x201120408000000L, 0x5002L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x2000040000000000L, 0x2040000002000L, 0x10000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1020001080200000L, 0x20100L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x408000000000L, 0x4L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L, 0x8000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L, 0x8L);
      case 91:
         jjmatchedKind = 24;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 25;
         return jjMoveNfa_0(0, 0);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0xc80000240000820L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40400000000a0004L, 0x40L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x10811000000L, 0x280L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x120001040L, 0x810L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x14800004000001L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x400800000000000L, 0x2100000000000000L, 0x421L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x8100480000000000L, 0x200000450000L, 0x2000L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x28000000000000L, 0x80000800080L, 0x80000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x8000000000004400L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x202000000000000L, 0x8310L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8002002100000L, 0x40000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x201120408000000L, 0x5002L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2000040000000000L, 0x2040000002000L, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1020001080200000L, 0x20100L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x408000000000L, 0x4L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L, 0x8000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L, 0x8L);
      case 123:
         jjmatchedKind = 32;
         return jjMoveNfa_0(0, 0);
      case 124:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L, 0x0L);
      case 125:
         jjmatchedKind = 33;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 1;
         }
         break;
      case 42:
         if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 1;
         }
         break;
      case 43:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 1;
         }
         break;
      case 45:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
         }
         break;
      case 47:
         if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         break;
      case 64:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x4080000000000000L, active1, 0x2000880080000008L, active2, 0x48200L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc00000200000000L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x2030240000000000L, active1, 0x2401645008a0040L, active2, 0x5002L);
      case 70:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000100L, active2, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0x10000002000L, active2, 0x20008L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x48000000000000L, active1, 0x1080L, active2, 0x400L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000001L, active2, 0L);
      case 78:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x104480000000000L, active1, 0x208004000000L, active2, 0x2000L);
      case 79:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0x4101000809004400L, active2, 0x808a0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 82:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000800000000000L, active1, 0x1028002032300012L, active2, 0x140L);
      case 83:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000400020L, active2, 0x4L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000000000L, active1, 0x8000000000000000L, active2, 0x1L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x14000000000000L, active2, 0L);
      case 89:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4080000000000000L, active1, 0x2000880080000008L, active2, 0x48200L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc00000200000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2030240000000000L, active1, 0x2401645008a0040L, active2, 0x5002L);
      case 102:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000100L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0x10000002000L, active2, 0x20008L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x48000000000000L, active1, 0x1080L, active2, 0x400L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000001L, active2, 0L);
      case 110:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x104480000000000L, active1, 0x208004000000L, active2, 0x2000L);
      case 111:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0x4101000809004400L, active2, 0x808a0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000800000000000L, active1, 0x1028002032300012L, active2, 0x140L);
      case 115:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000400020L, active2, 0x4L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000000000L, active1, 0x8000000000000000L, active2, 0x1L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x14000000000000L, active2, 0L);
      case 121:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 124:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000202000L, active2, 0L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 67:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000000L, active2, 0x82000L);
      case 68:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0x200000000010L, active2, 0x1000L);
      case 69:
         if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0x4010012100000L, active2, 0x40L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0x240000100000100L, active2, 0x4000L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0x80000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x3040a000000000L, active2, 0x8L);
      case 74:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc00000000000000L, active2, 0L);
      case 75:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x4400240000000000L, active1, 0xa000000808000000L, active2, 0x8000L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000080L, active2, 0L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x80400000000L, active2, 0x10481L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000800000000000L, active1, 0x4008000020400002L, active2, 0L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 82:
         if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000000L, active2, 0x60000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x10080000000000L, active1, 0x1041L, active2, 0L);
      case 84:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x280400000000000L, active1, 0x80060040020000L, active2, 0x202L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800008L, active2, 0L);
      case 87:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000L, active2, 0x800L);
      case 89:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 2;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000202000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 99:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000000L, active2, 0x82000L);
      case 100:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0x200000000010L, active2, 0x1000L);
      case 101:
         if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0x4010012100000L, active2, 0x40L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0x240000100000100L, active2, 0x4000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0x80000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x3040a000000000L, active2, 0x8L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc00000000000000L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4400240000000000L, active1, 0xa000000808000000L, active2, 0x8000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000080L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x80400000000L, active2, 0x10481L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000800000000000L, active1, 0x4008000020400002L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 114:
         if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000000L, active2, 0x60000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x10080000000000L, active1, 0x1041L, active2, 0L);
      case 116:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x280400000000000L, active1, 0x80060040020000L, active2, 0x202L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800008L, active2, 0L);
      case 119:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000L, active2, 0x800L);
      case 121:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 2;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0x510004000L, active2, 0xc0440L);
      case 67:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0xc010000000000L, active2, 0x10201L);
      case 69:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x3002c0000000000L, active1, 0x380200040800010L, active2, 0x4000L);
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20080000000000L, active2, 0L);
      case 72:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80088L, active2, 0x9000L);
      case 76:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100088400000L, active2, 0x2008L);
      case 77:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2001000000L, active2, 0L);
      case 78:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000200000L, active2, 0x800L);
      case 79:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40040000000000L, active2, 0x20000L);
      case 80:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2100000L, active2, 0L);
      case 81:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0x2000L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x2010000000000100L, active2, 0L);
      case 84:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000001000L, active2, 0x80L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x4080000000000000L, active1, 0xc00020800000002L, active2, 0x2L);
      case 87:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0x510004000L, active2, 0xc0440L);
      case 99:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0xc010000000000L, active2, 0x10201L);
      case 101:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x3002c0000000000L, active1, 0x380200040800010L, active2, 0x4000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20080000000000L, active2, 0L);
      case 104:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80088L, active2, 0x9000L);
      case 108:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100088400000L, active2, 0x2008L);
      case 109:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2001000000L, active2, 0L);
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000200000L, active2, 0x800L);
      case 111:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40040000000000L, active2, 0x20000L);
      case 112:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2100000L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0x2000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x2010000000000100L, active2, 0L);
      case 116:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000001000L, active2, 0x80L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4080000000000000L, active1, 0xc00020800000002L, active2, 0x2L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0x102002500000L, active2, 0L);
      case 66:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x8000L);
      case 69:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0xa000000020100L, active2, 0L);
      case 70:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 4;
         }
         break;
      case 71:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 72:
         if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000001005000L, active2, 0x80L);
      case 75:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 4;
         }
         break;
      case 76:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x40c00L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc00000000L, active2, 0L);
      case 78:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 80:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 4;
         }
         break;
      case 82:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80080000000000L, active1, 0x240020000000000L, active2, 0x5002L);
      case 83:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc00000000200000L, active2, 0L);
      case 84:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x300000000000L, active1, 0x10000010000000L, active2, 0x1L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4088100000000L, active2, 0x2000L);
      case 87:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 4;
         }
         break;
      case 88:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 4;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0x102002500000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x8000L);
      case 101:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0xa000000020100L, active2, 0L);
      case 102:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 4;
         }
         break;
      case 103:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 104:
         if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000001005000L, active2, 0x80L);
      case 107:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 4;
         }
         break;
      case 108:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x40c00L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc00000000L, active2, 0L);
      case 110:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 112:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 4;
         }
         break;
      case 114:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80080000000000L, active1, 0x240020000000000L, active2, 0x5002L);
      case 115:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc00000000200000L, active2, 0L);
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x300000000000L, active1, 0x10000010000000L, active2, 0x1L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4088100000000L, active2, 0x2000L);
      case 119:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 4;
         }
         break;
      case 120:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 4;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0x80008200000L, active2, 0x8000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000L, active2, 0x2000L);
      case 69:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x220000000020000L, active2, 0x1000L);
      case 71:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000L, active2, 0x40400L);
      case 77:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
      case 78:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000001000L, active2, 0x80L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x800L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2002100000L, active2, 0x10000L);
      case 83:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 5;
         }
         break;
      case 84:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xc04000000400000L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x4000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0x80008200000L, active2, 0x8000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000L, active2, 0x2000L);
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x220000000020000L, active2, 0x1000L);
      case 103:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000L, active2, 0x40400L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000001000L, active2, 0x80L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x800L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2002100000L, active2, 0x10000L);
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 5;
         }
         break;
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xc04000000400000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x800L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8201000L, active2, 0x1000L);
      case 69:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0x2000002000000L, active2, 0x40000L);
      case 70:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4000L);
      case 71:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000L, active2, 0L);
      case 76:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 6;
         }
         break;
      case 78:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10001L);
      case 82:
         if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 6;
         }
         break;
      case 83:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 6;
         }
         break;
      case 84:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8000L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000000L, active2, 0x80L);
      case 89:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 6;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xc00000000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x800L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8201000L, active2, 0x1000L);
      case 101:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0x2000002000000L, active2, 0x40000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4000L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000L, active2, 0L);
      case 108:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 6;
         }
         break;
      case 110:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10001L);
      case 114:
         if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 6;
         }
         break;
      case 115:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 6;
         }
         break;
      case 116:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000000L, active2, 0x80L);
      case 121:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 6;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 7;
         }
         break;
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 68:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 7;
         }
         break;
      case 69:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 7;
         }
         break;
      case 75:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 7;
         }
         break;
      case 76:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 7;
         }
         break;
      case 78:
         if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000000L, active2, 0x10000L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000L, active2, 0x8000L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000L, active2, 0x4000L);
      case 83:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 84:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 87:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 100:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 7;
         }
         break;
      case 101:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 7;
         }
         break;
      case 107:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 7;
         }
         break;
      case 108:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 7;
         }
         break;
      case 110:
         if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000000L, active2, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000L, active2, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000L, active2, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 69:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0xa00000000000000L, active2, 0L);
      case 72:
         return jjMoveStringLiteralDfa9_0(active1, 0x400000000000000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active1, 0x200000L, active2, 0x10000L);
      case 78:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 8;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x4000L);
      case 82:
         if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 8;
         }
         break;
      case 84:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 8;
         }
         break;
      case 101:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0xa00000000000000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa9_0(active1, 0x400000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active1, 0x200000L, active2, 0x10000L);
      case 110:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 8;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x4000L);
      case 114:
         if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 8;
         }
         break;
      case 116:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 8;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private final int jjMoveStringLiteralDfa9_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa10_0(active1, 0x400000000000000L, active2, 0L);
      case 77:
         if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 9;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa10_0(active1, 0x200000L, active2, 0L);
      case 83:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 9;
         }
         break;
      case 84:
         if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 9;
         }
         break;
      case 90:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x10000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active1, 0x400000000000000L, active2, 0L);
      case 109:
         if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 9;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa10_0(active1, 0x200000L, active2, 0L);
      case 115:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 9;
         }
         break;
      case 116:
         if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 9;
         }
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x10000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private final int jjMoveStringLiteralDfa10_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x10000L);
      case 78:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 10;
         }
         break;
      case 82:
         return jjMoveStringLiteralDfa11_0(active1, 0x400000000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x10000L);
      case 110:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 10;
         }
         break;
      case 114:
         return jjMoveStringLiteralDfa11_0(active1, 0x400000000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
private final int jjMoveStringLiteralDfa11_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 68:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 11;
         }
         break;
      case 69:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 11;
         }
         break;
      case 100:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 11;
         }
         break;
      case 101:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 11;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 9;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 149)
                        kind = 149;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if (curChar == 45)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 150)
                     kind = 150;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 39:
         jjmatchedKind = 163;
         return jjMoveStringLiteralDfa1_1(0x1000000000L);
      case 92:
         return jjMoveStringLiteralDfa1_1(0x6000000000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_1(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 39:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 164);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 166);
         break;
      case 92:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 165);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 159);
      case 92:
         return jjMoveStringLiteralDfa1_2(0x300000000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 34:
         if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 161);
         break;
      case 92:
         if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 160);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x20000000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_3(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 157);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   3, 4, 5, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\73", "\75", "\52", 
"\53\53", "\53", "\55\55", "\55", "\57", "\45", "\46\46", "\174\174", "\46", "\174", 
"\50", "\51", "\133", "\135", "\44", "\56", "\54", "\74\76", "\100\100", "\100", 
"\173", "\175", "\75\75", "\41\75", "\76", "\76\75", "\74", "\74\75", "\41", "\72", 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "SQ_STR", 
   "DQ_STR", 
   "COMM", 
   "L_COMM", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, 2, 1, 3, 4, 0, -1, 0, -1, 0, -1, -1, -1, 0, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffe01L, 0xffffffffffffffffL, 0x8807fffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0x28000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x28000000L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 0xf757800000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[9];
private final int[] jjstateSet = new int[18];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public AlinousScriptParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public AlinousScriptParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 9; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 167)
         {
            jjmatchedKind = 167;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 162)
         {
            jjmatchedKind = 162;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 158)
         {
            jjmatchedKind = 158;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 156)
         {
            jjmatchedKind = 156;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 159 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                matchedToken.image = image.substring(1, image.length() - 1);
         break;
      case 163 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                String img = image.substring(1, image.length() - 1);
                matchedToken.image = img.replaceAll("''", "'");
         break;
      default : 
         break;
   }
}
}
