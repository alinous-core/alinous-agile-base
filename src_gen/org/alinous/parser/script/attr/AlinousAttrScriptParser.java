/* Generated By:JavaCC: Do not edit this line. AlinousAttrScriptParser.java */
package org.alinous.parser.script.attr;

import org.alinous.script.IScriptObject;
import org.alinous.script.attribute.ParsedAttribute;
import org.alinous.script.basic.condition.AndCondition;
import org.alinous.script.basic.condition.DirectCondition;
import org.alinous.script.basic.condition.DivStmtCondition;
import org.alinous.script.basic.condition.IScriptCondition;
import org.alinous.script.basic.condition.MinusStmtCondition;
import org.alinous.script.basic.condition.ModuloStmtCondition;
import org.alinous.script.basic.condition.MultipleStmtCondition;
import org.alinous.script.basic.condition.NotCondition;
import org.alinous.script.basic.condition.OrCondition;
import org.alinous.script.basic.condition.ParenthesisCondition;
import org.alinous.script.basic.condition.PlusStmtCondition;
import org.alinous.script.basic.condition.VariableStmtCondition;
import org.alinous.script.basic.type.BooleanConst;
import org.alinous.script.basic.type.IStatement;
import org.alinous.script.basic.type.NullConst;
import org.alinous.script.basic.type.NumericConst;
import org.alinous.script.basic.type.StringConst;
import org.alinous.script.basic.type.VariableDescriptor;
import org.alinous.script.runtime.ArrayPathElement;
import org.alinous.script.runtime.DomPathElement;
import org.alinous.script.runtime.IPathElement;
import org.alinous.script.runtime.PathElement;
import org.alinous.script.statement.FuncArguments;
import org.alinous.script.statement.FunctionCall;
import org.alinous.script.statement.ModuloStatement;
import org.alinous.script.statement.MultipleStatement;
import org.alinous.script.statement.ParenthesisElemenet;
import org.alinous.script.statement.PlusPlusStatement;
import org.alinous.script.statement.PlusStatement;
import org.alinous.script.statement.SubStatement;





@SuppressWarnings({"unused", "rawtypes"})
public class AlinousAttrScriptParser implements AlinousAttrScriptParserConstants {

  final public ParsedAttribute parse() throws ParseException {
        ParsedAttribute attr = new ParsedAttribute();
        IScriptObject scriptObj = null;
        StringConst stringConst = null;
        Token lastToken = null;
    jj_consume_token(LT_DEFAULT);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case L_BRACE:
      case BODY_L_BRACE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case L_BRACE:
        jj_consume_token(L_BRACE);
        break;
      case BODY_L_BRACE:
        stringConst = stringAndBrace();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLLAR:
      case L_PARENTHESIS:
      case PLUSPLUS:
      case MINUSMINUS:
      case AT_MARK:
      case TRUE:
      case FALSE:
      case BOOL:
      case NULL:
      case IDENTIFIER:
      case NUMERIC:
      case DQSTRLIT:
      case SQSTRLIT:
        scriptObj = scriptElement();
        jj_consume_token(R_BRACE);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
                        if(stringConst != null){
                                attr.addElement(stringConst);
                        }

                        if(scriptObj != null){
                                attr.addElement(scriptObj);
                        }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GT_BODY:
      lastToken = jj_consume_token(GT_BODY);
      break;
    case GT_DEFAULT:
      jj_consume_token(GT_DEFAULT);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(0);
                if(lastToken != null){
                        stringConst = new StringConst();
                        stringConst.setStr(lastToken.image);
                        attr.addElement(stringConst);
                }

                {if (true) return attr;}
    throw new Error("Missing return statement in function");
  }

  final public StringConst stringAndBrace() throws ParseException {
        Token t = null;
        StringConst strConst = null;
    t = jj_consume_token(BODY_L_BRACE);
                if(t != null){
                        strConst = new StringConst();
                        strConst.setStr(t.image);
                }

                {if (true) return strConst;}
    throw new Error("Missing return statement in function");
  }

  final public IScriptObject scriptElement() throws ParseException {
        IScriptObject scriptObj = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL:
      scriptObj = conditionElement();
      break;
    case DOLLAR:
    case L_PARENTHESIS:
    case PLUSPLUS:
    case MINUSMINUS:
    case AT_MARK:
    case TRUE:
    case FALSE:
    case NULL:
    case IDENTIFIER:
    case NUMERIC:
    case DQSTRLIT:
    case SQSTRLIT:
      scriptObj = statement();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return scriptObj;}
    throw new Error("Missing return statement in function");
  }

  final public IScriptObject conditionElement() throws ParseException {
        IScriptCondition cond;
    jj_consume_token(BOOL);
    jj_consume_token(L_PARENTHESIS);
    cond = condition();
    jj_consume_token(R_PARENTHESIS);
                {if (true) return cond;}
    throw new Error("Missing return statement in function");
  }

  final public VariableDescriptor scriptVariable() throws ParseException {
        VariableDescriptor val = null;

        IPathElement path = null;
        Token prefix = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR:
      prefix = jj_consume_token(DOLLAR);
      break;
    case AT_MARK:
      prefix = jj_consume_token(AT_MARK);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    path = domPath();
                val = new VariableDescriptor(prefix.image, path);
                {if (true) return val;}
    throw new Error("Missing return statement in function");
  }

  final public BooleanConst constBoolean() throws ParseException {
        BooleanConst blConst = new BooleanConst();
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                blConst.setBoolStr(t.image);
                {if (true) return blConst;}
    throw new Error("Missing return statement in function");
  }

  final public StringConst constStr() throws ParseException {
        Token t = null;
        StringConst cn = new StringConst();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DQSTRLIT:
      t = jj_consume_token(DQSTRLIT);
      break;
    case SQSTRLIT:
      t = jj_consume_token(SQSTRLIT);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                cn.setStr(t.image);
                {if (true) return cn;}
    throw new Error("Missing return statement in function");
  }

  final public NumericConst constNum() throws ParseException {
        NumericConst nc = new NumericConst();
        Token t = null;
    t = jj_consume_token(NUMERIC);
                nc.setNumber(t.image);
                {if (true) return nc;}
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition condition() throws ParseException {
        IScriptCondition condition = null;
    condition = orCond();
                {if (true) return condition;}
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition orCond() throws ParseException {
        IScriptCondition first = null;
        IScriptCondition cnd = null;
        OrCondition or = null;
    first = andCond();
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(LOGICAL_OR);
      cnd = andCond();
                        if(or == null){
                                or = new OrCondition();
                                or.addCondition(first);
                        }

                        or.addCondition(cnd);
    }
                if(or != null){
                        {if (true) return or;}
                }

                {if (true) return first;}
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition andCond() throws ParseException {
        IScriptCondition first = null;
        IScriptCondition cnd = null;
        AndCondition and = null;
    first = directCond();
    label_3:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(LOGICAL_AND);
      cnd = directCond();
                        if(and == null){
                                and = new AndCondition();
                                and.addCondition(first);
                        }

                        and.addCondition(cnd);
    }
                if(and != null){
                        {if (true) return and;}
                }

                {if (true) return first;}
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition directCond() throws ParseException {
        Token ope = null;
        IScriptCondition left = null;
        IScriptCondition right = null;
        DirectCondition directCnd = null;
    left = notCondition();
    if (jj_2_3(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CMP_EQUALS:
        ope = jj_consume_token(CMP_EQUALS);
        break;
      case CMP_NOTEQUALS:
        ope = jj_consume_token(CMP_NOTEQUALS);
        break;
      case GT:
        ope = jj_consume_token(GT);
        break;
      case GEQ:
        ope = jj_consume_token(GEQ);
        break;
      case LT:
        ope = jj_consume_token(LT);
        break;
      case LEQ:
        ope = jj_consume_token(LEQ);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = notCondition();
    } else {
      ;
    }
                if(ope != null){
                        directCnd = new DirectCondition();

                        directCnd.setLeft(left);
                        directCnd.setOpe(ope.image);
                        directCnd.setRight(right);

                        {if (true) return directCnd;}
                }

                {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition notCondition() throws ParseException {
        IScriptCondition cnd = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      cnd = orCond();
                NotCondition notCondition = new NotCondition();
                notCondition.setCondition(cnd);

                {if (true) return notCondition;}
      break;
    case DOLLAR:
    case L_PARENTHESIS:
    case PLUSPLUS:
    case MINUSMINUS:
    case AT_MARK:
    case TRUE:
    case FALSE:
    case NULL:
    case IDENTIFIER:
    case NUMERIC:
    case DQSTRLIT:
    case SQSTRLIT:
      cnd = plusStmtCond();
                {if (true) return cnd;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition plusStmtCond() throws ParseException {
        IScriptCondition first = null;
        IScriptCondition cnd = null;
        PlusStmtCondition scCond = null;
    first = minusStmtCond();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(PLUS);
      cnd = minusStmtCond();
                        if(scCond == null){
                                scCond = new PlusStmtCondition();
                                scCond.addCondition(first);
                        }
                        scCond.addCondition(cnd);
    }
                if(scCond == null){
                        {if (true) return first;}
                }
                {if (true) return scCond;}
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition minusStmtCond() throws ParseException {
        IScriptCondition first = null;
        IScriptCondition cnd = null;
        MinusStmtCondition scCond = null;
    first = multipleStmtCond();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      jj_consume_token(MINUS);
      cnd = multipleStmtCond();
                        if(scCond == null){
                                scCond = new MinusStmtCondition();
                                scCond.addCondition(first);
                        }
                        scCond.addCondition(cnd);
    }
                if(scCond == null){
                        {if (true) return first;}
                }
                {if (true) return scCond;}
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition multipleStmtCond() throws ParseException {
        IScriptCondition first = null;
        IScriptCondition cnd = null;
        MultipleStmtCondition scCond = null;
    first = divStmtCond();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASTERISK:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      jj_consume_token(ASTERISK);
      cnd = divStmtCond();
                        if(scCond == null){
                                scCond = new MultipleStmtCondition();
                                scCond.addCondition(first);
                        }
                        scCond.addCondition(cnd);
    }
                if(scCond == null){
                        {if (true) return first;}
                }
                {if (true) return scCond;}
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition divStmtCond() throws ParseException {
        IScriptCondition first = null;
        IScriptCondition cnd = null;
        DivStmtCondition scCond = null;
    first = moduloStmtCond();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIV:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_7;
      }
      jj_consume_token(DIV);
      cnd = moduloStmtCond();
                        if(scCond == null){
                                scCond = new DivStmtCondition();
                                scCond.addCondition(first);
                        }
                        scCond.addCondition(cnd);
    }
                if(scCond == null){
                        {if (true) return first;}
                }
                {if (true) return scCond;}
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition moduloStmtCond() throws ParseException {
        IScriptCondition first = null;
        IScriptCondition cnd = null;
        ModuloStmtCondition scCond = null;
    first = parenthesisCond();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODULO:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_8;
      }
      jj_consume_token(MODULO);
      cnd = parenthesisCond();
                        if(scCond == null){
                                scCond = new ModuloStmtCondition();
                                scCond.addCondition(first);
                        }
                        scCond.addCondition(cnd);
    }
                if(scCond == null){
                        {if (true) return first;}
                }
                {if (true) return scCond;}
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition parenthesisCond() throws ParseException {
        IScriptCondition cnd = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case L_PARENTHESIS:
      jj_consume_token(L_PARENTHESIS);
      cnd = orCond();
      jj_consume_token(R_PARENTHESIS);
                ParenthesisCondition pcnd = new ParenthesisCondition();
                pcnd.setCondition(cnd);

                {if (true) return pcnd;}
      break;
    case DOLLAR:
    case PLUSPLUS:
    case MINUSMINUS:
    case AT_MARK:
    case TRUE:
    case FALSE:
    case NULL:
    case IDENTIFIER:
    case NUMERIC:
    case DQSTRLIT:
    case SQSTRLIT:
      cnd = variableStatementCondition();
                {if (true) return cnd;}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition variableStatementCondition() throws ParseException {
        IStatement stmt = null;
        VariableStmtCondition cond = new VariableStmtCondition();
    stmt = plusplusStatement();
                cond.setStmt(stmt);
                {if (true) return cond;}
    throw new Error("Missing return statement in function");
  }

  final public IStatement statement() throws ParseException {
        IStatement stmt = null;
    stmt = plusStatement();
                {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public IStatement plusStatement() throws ParseException {
        IStatement first = null;
        IStatement stmt = null;
        PlusStatement plusStatement = null;
        Token t = null;
    first = multipleStatement();
    label_9:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      stmt = multipleStatement();
                        if(plusStatement == null){
                                plusStatement = new PlusStatement();
                                plusStatement.setFirst(first);
                        }

                        SubStatement subStmt = new SubStatement();
                        subStmt.setOpe(t.image);
                        subStmt.setTarget(stmt);

                        plusStatement.addOperation(subStmt);
    }
                if(plusStatement != null){
                        {if (true) return plusStatement;}
                }

                {if (true) return first;}
    throw new Error("Missing return statement in function");
  }

  final public IStatement multipleStatement() throws ParseException {
        IStatement first = null;
        IStatement stmt = null;
        Token t = null;
        MultipleStatement mulStatement = null;
    first = moduloStatement();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASTERISK:
      case DIV:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASTERISK:
        t = jj_consume_token(ASTERISK);
        break;
      case DIV:
        t = jj_consume_token(DIV);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      stmt = moduloStatement();
                        if(mulStatement == null){
                                mulStatement = new MultipleStatement();
                                mulStatement.setFirst(first);
                        }

                        SubStatement subStmt = new SubStatement();
                        subStmt.setOpe(t.image);
                        subStmt.setTarget(stmt);

                        mulStatement.addOperation(subStmt);
    }
                if(mulStatement != null){
                        {if (true) return mulStatement;}
                }

                {if (true) return first;}
    throw new Error("Missing return statement in function");
  }

  final public IStatement moduloStatement() throws ParseException {
        IStatement first = null;
        IStatement stmt = null;
        ModuloStatement modStmt = null;
    first = parenthesisElement();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODULO:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_11;
      }
      jj_consume_token(MODULO);
      stmt = parenthesisElement();
                        if(modStmt == null){
                                modStmt = new ModuloStatement();
                                modStmt.setFirst(first);
                                modStmt.addOperation(stmt);

                        }else{
                                modStmt.addOperation(stmt);
                        }
    }
                if(modStmt != null){
                        {if (true) return modStmt;}
                }

                {if (true) return first;}
    throw new Error("Missing return statement in function");
  }

  final public IStatement parenthesisElement() throws ParseException {
        IStatement stmt = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR:
    case PLUSPLUS:
    case MINUSMINUS:
    case AT_MARK:
    case TRUE:
    case FALSE:
    case NULL:
    case IDENTIFIER:
    case NUMERIC:
    case DQSTRLIT:
    case SQSTRLIT:
      stmt = plusplusStatement();
                {if (true) return stmt;}
      break;
    case L_PARENTHESIS:
      jj_consume_token(L_PARENTHESIS);
      stmt = statement();
      jj_consume_token(R_PARENTHESIS);
                ParenthesisElemenet p = new ParenthesisElemenet();
                p.setStatement(stmt);

                {if (true) return p;}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IStatement plusplusStatement() throws ParseException {
        PlusPlusStatement plusplus = null;
        IStatement stmt = null;
        Token t1 = null;
        Token t2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUSPLUS:
    case MINUSMINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUSPLUS:
        t1 = jj_consume_token(PLUSPLUS);
        break;
      case MINUSMINUS:
        t1 = jj_consume_token(MINUSMINUS);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      stmt = statementElement();
                plusplus = new PlusPlusStatement();
                plusplus.setStmt(stmt);

                plusplus.setPreOpe(t1.image);
                plusplus.setLine(t1.beginLine);
                plusplus.setLinePosition(t1.beginColumn);

                {if (true) return plusplus;}
      break;
    case DOLLAR:
    case AT_MARK:
    case TRUE:
    case FALSE:
    case NULL:
    case IDENTIFIER:
    case NUMERIC:
    case DQSTRLIT:
    case SQSTRLIT:
      stmt = statementElement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUSPLUS:
      case MINUSMINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUSPLUS:
          t2 = jj_consume_token(PLUSPLUS);
          break;
        case MINUSMINUS:
          t2 = jj_consume_token(MINUSMINUS);
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
                if(t2 == null){
                        {if (true) return stmt;}
                }

                plusplus = new PlusPlusStatement();
                plusplus.setStmt(stmt);

                plusplus.setPostOpe(t2.image);
                plusplus.setLine(t2.beginLine);
                plusplus.setLinePosition(t2.beginColumn);

                {if (true) return plusplus;}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IStatement statementElement() throws ParseException {
        IStatement stmt = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      stmt = funcCall();
      break;
    case DOLLAR:
    case AT_MARK:
      stmt = scriptVariable();
      break;
    case NULL:
      stmt = nullConst();
      break;
    case DQSTRLIT:
    case SQSTRLIT:
      stmt = constStr();
      break;
    case TRUE:
    case FALSE:
      stmt = constBoolean();
      break;
    case NUMERIC:
      stmt = constNum();
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public NullConst nullConst() throws ParseException {
        NullConst stmt = new NullConst();
    jj_consume_token(NULL);
                {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public FunctionCall funcCall() throws ParseException {
        FunctionCall func = new FunctionCall();
        FuncArguments args = new FuncArguments();
        Token t = null;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(L_PARENTHESIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR:
    case L_PARENTHESIS:
    case PLUSPLUS:
    case MINUSMINUS:
    case AT_MARK:
    case TRUE:
    case FALSE:
    case NULL:
    case IDENTIFIER:
    case NUMERIC:
    case DQSTRLIT:
    case SQSTRLIT:
      args = funcArguments();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(R_PARENTHESIS);
                func.setArgs(args);
                func.setFuncName(t.image);

                {if (true) return func;}
    throw new Error("Missing return statement in function");
  }

  final public FuncArguments funcArguments() throws ParseException {
        FuncArguments args = new FuncArguments();
        IStatement stmt = null;
    stmt = statement();
                args.addArgument(stmt);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      stmt = statement();
                        args.addArgument(stmt);
    }
                {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

///  PATH ELEMENT /////////////////////////////////////////////////////////
  final public IPathElement domPath() throws ParseException {
        DomPathElement first = null;
        DomPathElement domProp = null;
        IStatement numeric = null;

        PathElement path = null;
        IPathElement current = null;
    first = domPathElement();
                path = new PathElement(first.getImage());
                current = path;
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case L_BRACKET:
      case DOT:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        domProp = domPathElement();
                        PathElement next = new PathElement(domProp.getImage());
                        current.setChild(next);
                        next.setParent(current);

                        current = next;
        break;
      case L_BRACKET:
        jj_consume_token(L_BRACKET);
        numeric = statement();
        jj_consume_token(R_BRACKET);
                        ArrayPathElement nextAr = new ArrayPathElement(numeric);

                        current.setChild(nextAr);
                        nextAr.setParent(current);

                        current = nextAr;
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return path;}
    throw new Error("Missing return statement in function");
  }

  final public DomPathElement domPathElement() throws ParseException {
        Token t = null;
        DomPathElement el = new DomPathElement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    case IF:
      t = jj_consume_token(IF);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                el.addString(t.image);
    if (jj_2_5(2)) {
      t = jj_consume_token(MINUS);
                        el.addString(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
        break;
      case IF:
        t = jj_consume_token(IF);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        el.addString(t.image);
    } else {
      ;
    }
                {if (true) return el;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(NUMERIC)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    }
    }
    }
    }
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) return true;
    }
    return false;
  }

  final private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(L_PARENTHESIS)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(LOGICAL_AND)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  final private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(L_PARENTHESIS)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(LOGICAL_OR)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) return true;
    }
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(MINUS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  public AlinousAttrScriptParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x2200,0x2200,0x80400000,0x4400,0x80400000,0x400000,0x0,0x0,0x1f800000,0x80400000,0x0,0x0,0x0,0x0,0x0,0x80400000,0x0,0x0,0x0,0x0,0x80400000,0x0,0x0,0x0,0x400000,0x400000,0x80400000,0x0,0x20000000,0x20000000,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x93b9028,0x0,0x93b9028,0x1000,0x18000,0x9000000,0x0,0x939b028,0x10,0x40,0x4,0x80,0x100,0x9399028,0x50,0x84,0x84,0x100,0x9399028,0x28,0x28,0x28,0x9399028,0x9399000,0x9399028,0x800,0x2,0x2,0x140000,0x140000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public AlinousAttrScriptParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public AlinousAttrScriptParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AlinousAttrScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public AlinousAttrScriptParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AlinousAttrScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public AlinousAttrScriptParser(AlinousAttrScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(AlinousAttrScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error {

	/**
	 * 
	 */
	private static final long serialVersionUID = 5281015756520001581L; }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  @SuppressWarnings("unchecked")
private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  @SuppressWarnings("unchecked")
public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[62];
    for (int i = 0; i < 62; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 62; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
