/* Generated By:JavaCC: Do not edit this line. AlinousScriptParser.java */
package org.alinous.parser.script;

import org.alinous.datasrc.types.UpdateType;
import org.alinous.script.runtime.ArrayPathElement;
import org.alinous.script.runtime.DomPathElement;
import org.alinous.script.runtime.IPathElement;
import org.alinous.script.runtime.PathElement;
import org.alinous.script.sql.ISQLScriptObject;
import org.alinous.script.AlinousScript;
import org.alinous.script.IScriptBlock;
import org.alinous.script.IScriptSentence;
import org.alinous.script.sql.SelectSentence;
import org.alinous.script.sql.UpdateSentence;
import org.alinous.script.sql.SetClause;
import org.alinous.script.sql.lock.ForUpdateClause;
import org.alinous.script.sql.other.SetPair;
import org.alinous.script.sql.BeginSentence;
import org.alinous.script.sql.CommitSentence;
import org.alinous.script.sql.DeleteSentence;
import org.alinous.script.sql.GroupByClause;
import org.alinous.script.sql.HavingClause;
import org.alinous.script.sql.InsertSentence;
import org.alinous.script.sql.OrderByClause;
import org.alinous.script.sql.LimitOffsetClause;
import org.alinous.script.sql.PrepareTransactionSentence;
import org.alinous.script.sql.RollbackSentence;
import org.alinous.script.sql.SelectColumns;
import org.alinous.script.sql.IntoClause;
import org.alinous.script.sql.FromClause;
import org.alinous.script.sql.JoinClause;
import org.alinous.script.sql.other.JoinCondition;
import org.alinous.script.sql.WhereClause;
import org.alinous.script.sql.adjustopt.AdjustSet;
import org.alinous.script.sql.adjustopt.AdjustWhere;
import org.alinous.script.sql.condition.BetweenClauseExpression;
import org.alinous.script.sql.condition.ISQLExpression;
import org.alinous.script.sql.condition.InClauseExpression;
import org.alinous.script.sql.condition.IsNullClauseExpression;
import org.alinous.script.sql.condition.LikeExpression;
import org.alinous.script.sql.condition.OrExpression;
import org.alinous.script.sql.condition.AndExpression;
import org.alinous.script.sql.condition.SQLNotExpression;
import org.alinous.script.sql.condition.TwoClauseExpression;
import org.alinous.script.sql.condition.ParenthesisExpression;
import org.alinous.script.sql.ddl.AlterAdd;
import org.alinous.script.sql.ddl.AlterDrop;
import org.alinous.script.sql.ddl.AlterRename;
import org.alinous.script.sql.ddl.AlterTableSentence;
import org.alinous.script.sql.ddl.CheckDefinition;
import org.alinous.script.sql.ddl.ColumnTypeDescriptor;
import org.alinous.script.sql.ddl.CreateIndexSentence;
import org.alinous.script.sql.ddl.CreateTableSentence;
import org.alinous.script.sql.ddl.DdlColumnDescriptor;
import org.alinous.script.sql.ddl.DropIndexSentence;
import org.alinous.script.sql.ddl.DropTableSentence;
import org.alinous.script.sql.ddl.ForeignKey;
import org.alinous.script.sql.ddl.IAlterAction;
import org.alinous.script.sql.ddl.PrimaryKeys;
import org.alinous.script.sql.ddl.Unique;
import org.alinous.script.sql.ddl.plsql.CreateFunctionSentence;
import org.alinous.script.sql.ddl.plsql.CreateTriggerSentence;
import org.alinous.script.sql.ddl.plsql.DropFunctionSentence;
import org.alinous.script.sql.ddl.plsql.DropTriggerSentence;
import org.alinous.script.sql.statement.ISQLStatement;
import org.alinous.script.sql.statement.JoinSubQueryTarget;
import org.alinous.script.sql.statement.SQLAllStatemtet;
import org.alinous.script.sql.statement.SQLNullConst;
import org.alinous.script.sql.statement.SQLParenthesisStatement;
import org.alinous.script.sql.statement.SQLVariable;
import org.alinous.script.sql.statement.SQLStringConst;
import org.alinous.script.sql.statement.SQLNumericConst;
import org.alinous.script.sql.statement.Identifier;
import org.alinous.script.sql.statement.SQLSubStatement;
import org.alinous.script.sql.statement.SQLStatement;
import org.alinous.script.sql.statement.ColumnIdentifier;
import org.alinous.script.sql.statement.SQLFunctionCallStatement;
import org.alinous.script.sql.statement.SQLFunctionCallArguments;
import org.alinous.script.sql.statement.SubQueryStatement;
import org.alinous.script.sql.other.SelectColumnElement;
import org.alinous.script.sql.other.TablesList;
import org.alinous.script.sql.other.TableIdentifier;
import org.alinous.script.sql.other.ColumnList;
import org.alinous.script.sql.other.VariableList;


import org.alinous.script.basic.BreakSentence;
import org.alinous.script.basic.ContinueSentence;
import org.alinous.script.basic.DownloadSentence;
import org.alinous.script.basic.ElseBlock;
import org.alinous.script.basic.FunctionCallSentence;
import org.alinous.script.basic.IncludeSentence;
import org.alinous.script.basic.PlusPlusSentence;
import org.alinous.script.basic.RedirectSentence;
import org.alinous.script.basic.ReferFromSentence;
import org.alinous.script.basic.ReturnSentence;
import org.alinous.script.basic.SubstituteSentence;
import org.alinous.script.basic.SynchronizeBlock;
import org.alinous.script.basic.UseSentence;
import org.alinous.script.basic.ValidatorSentence;
import org.alinous.script.basic.type.BooleanConst;
import org.alinous.script.basic.type.DoubleConst;
import org.alinous.script.basic.type.IStatement;
import org.alinous.script.basic.type.IVariableDescription;
import org.alinous.script.basic.type.NullConst;
import org.alinous.script.basic.type.NumericConst;
import org.alinous.script.basic.type.StringConst;
import org.alinous.script.basic.type.VariableDescriptor;
import org.alinous.script.basic.IfBlock;
import org.alinous.script.basic.WhileBlock;
import org.alinous.script.basic.DoWhileBlock;
import org.alinous.script.basic.ForBlock;

import org.alinous.script.basic.condition.DivStmtCondition;
import org.alinous.script.basic.condition.IScriptCondition;
import org.alinous.script.basic.condition.DirectCondition;
import org.alinous.script.basic.condition.MinusStmtCondition;
import org.alinous.script.basic.condition.ModuloStmtCondition;
import org.alinous.script.basic.condition.MultipleStmtCondition;
import org.alinous.script.basic.condition.NotCondition;
import org.alinous.script.basic.condition.ParenthesisCondition;
import org.alinous.script.basic.condition.AndCondition;
import org.alinous.script.basic.condition.OrCondition;
import org.alinous.script.basic.condition.PlusStmtCondition;
import org.alinous.script.basic.condition.VariableStmtCondition;
import org.alinous.script.basic.exception.CatchBlock;
import org.alinous.script.basic.exception.FinallyBlock;
import org.alinous.script.basic.exception.ThrowSentence;
import org.alinous.script.basic.exception.TryBlock;
import org.alinous.script.basic.parallel.LocalSentence;
import org.alinous.script.basic.parallel.ParallelBlock;

import org.alinous.script.functions.ArgumentDeclare;
import org.alinous.script.functions.ArgumentsDeclare;
import org.alinous.script.functions.FuncDeclarations;
import org.alinous.script.functions.FunctionDeclaration;

import org.alinous.script.statement.BooleanStatement;
import org.alinous.script.statement.FunctionCall;
import org.alinous.script.statement.FuncArguments;
import org.alinous.script.statement.ModuloStatement;
import org.alinous.script.statement.MultipleStatement;
import org.alinous.script.statement.ParenthesisElemenet;
import org.alinous.script.statement.PlusPlusStatement;
import org.alinous.script.statement.PlusStatement;
import org.alinous.script.statement.SubStatement;

@SuppressWarnings({"unused", "unchecked", "rawtypes"})
public class AlinousScriptParser implements AlinousScriptParserConstants {
        private String filePath;
    private AlinousScript lastScript;

    public AlinousScript getLastScript()
    {
        return this.lastScript;
    }

        public void setFilePath(String filePath)
        {
                this.filePath = filePath;
        }

  final public AlinousScript parse() throws ParseException {
        AlinousScript topObj = new AlinousScript(this.filePath);
        IScriptSentence sentence = null;
        IncludeSentence incSentence = null;
        ReferFromSentence refSentence = null;
        ValidatorSentence validatorSentence = null;
        FuncDeclarations funcDec = null;

        this.lastScript = topObj;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCLUDE:
      case REFERER_FROM:
      case VALIDATOR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCLUDE:
        incSentence = includeSentence();
        jj_consume_token(SEMI_COLON);
                        topObj.addInclude(incSentence);
        break;
      case REFERER_FROM:
        refSentence = referFromSentence();
        jj_consume_token(SEMI_COLON);
                        topObj.addReferFrom(refSentence);
        break;
      case VALIDATOR:
        validatorSentence = validatorSentence();
        jj_consume_token(SEMI_COLON);
                        topObj.addValidatorSentence(validatorSentence);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUSPLUS:
      case MINUSMINUS:
      case DOLLAR:
      case AT_MARK:
      case SELECT:
      case INSERT:
      case UPDATE:
      case DELETE:
      case INTO:
      case FROM:
      case WHERE:
      case OR:
      case AND:
      case LIKE:
      case ESCAPE:
      case LEFT:
      case RIGHT:
      case NATURAL:
      case INNER:
      case OUTER:
      case FULL:
      case JOIN:
      case CROSS:
      case SET:
      case VALUES:
      case IF:
      case GROUP:
      case BY:
      case HAVING:
      case ORDER:
      case ASC:
      case DESC:
      case LIMIT:
      case OFFSET:
      case ON:
      case SQL_NOT:
      case AS:
      case DISTINCT:
      case IN:
      case BETWEEN:
      case IS:
      case BEGIN:
      case PREPARE:
      case COMMIT:
      case END:
      case ROLLBACK:
      case CREATE:
      case DROP:
      case ALTER:
      case ADD:
      case RENAME:
      case CHECK:
      case RETURNS:
      case SETOF:
      case LANGUAGE:
      case REPLACE:
      case INDEX:
      case USING:
      case EACH:
      case ROW:
      case STATEMENT:
      case EXECUTE:
      case PROCEDURE:
      case EXISTS:
      case TRIGGER:
      case BEFORE:
      case AFTER:
      case FOREIGN:
      case REFERENCES:
      case TRUE:
      case FALSE:
      case BOOL:
      case NULL:
      case RETURN:
      case USE:
      case WHILE:
      case DO:
      case FOR:
      case BREAK:
      case CONTINUE:
      case TRY:
      case DOWNLOAD:
      case REDIRECT:
      case SYNCHRONIZED:
      case THROW:
      case PARALLEL:
      case LOCAL:
      case IDENTIFIER:
      case NUMERIC:
      case DOUBLE:
      case DQSTRLIT:
      case SQSTRLIT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      if (jj_2_1(3)) {
        sentence = block();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUSPLUS:
        case MINUSMINUS:
        case DOLLAR:
        case AT_MARK:
        case SELECT:
        case INSERT:
        case UPDATE:
        case DELETE:
        case INTO:
        case FROM:
        case WHERE:
        case OR:
        case AND:
        case LIKE:
        case ESCAPE:
        case LEFT:
        case RIGHT:
        case NATURAL:
        case INNER:
        case OUTER:
        case FULL:
        case JOIN:
        case CROSS:
        case SET:
        case VALUES:
        case GROUP:
        case BY:
        case HAVING:
        case ORDER:
        case ASC:
        case DESC:
        case LIMIT:
        case OFFSET:
        case ON:
        case SQL_NOT:
        case AS:
        case DISTINCT:
        case IN:
        case BETWEEN:
        case IS:
        case BEGIN:
        case PREPARE:
        case COMMIT:
        case END:
        case ROLLBACK:
        case CREATE:
        case DROP:
        case ALTER:
        case ADD:
        case RENAME:
        case CHECK:
        case RETURNS:
        case SETOF:
        case LANGUAGE:
        case REPLACE:
        case INDEX:
        case USING:
        case EACH:
        case ROW:
        case STATEMENT:
        case EXECUTE:
        case PROCEDURE:
        case EXISTS:
        case TRIGGER:
        case BEFORE:
        case AFTER:
        case FOREIGN:
        case REFERENCES:
        case TRUE:
        case FALSE:
        case BOOL:
        case NULL:
        case RETURN:
        case USE:
        case BREAK:
        case CONTINUE:
        case DOWNLOAD:
        case REDIRECT:
        case THROW:
        case PARALLEL:
        case LOCAL:
        case IDENTIFIER:
        case NUMERIC:
        case DOUBLE:
        case DQSTRLIT:
        case SQSTRLIT:
          sentence = sentence();
          jj_consume_token(SEMI_COLON);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                topObj.addSentence(sentence);
    }
    funcDec = funcDeclarations();
    jj_consume_token(0);
        topObj.setFuncDeclarations(funcDec);
        {if (true) return topObj;}
    throw new Error("Missing return statement in function");
  }

  final public IncludeSentence includeSentence() throws ParseException {
        IncludeSentence sentence = new IncludeSentence();
        FuncArguments args = null;
        Token t1 = null;
    t1 = jj_consume_token(INCLUDE);
    jj_consume_token(L_PARENTHESIS);
    args = funcArguments();
    jj_consume_token(R_PARENTHESIS);
                sentence.setLine(t1.beginLine);
                sentence.setLinePosition(t1.beginColumn);

                sentence.setArgs(args);

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public ReferFromSentence referFromSentence() throws ParseException {
        ReferFromSentence sentence = new ReferFromSentence();
        FuncArguments args = null;
        Token t1 = null;
    t1 = jj_consume_token(REFERER_FROM);
    jj_consume_token(L_PARENTHESIS);
    args = funcArguments();
    jj_consume_token(R_PARENTHESIS);
                sentence.setLine(t1.beginLine);
                sentence.setLinePosition(t1.beginColumn);

                sentence.setArgs(args);

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public ValidatorSentence validatorSentence() throws ParseException {
        ValidatorSentence sentence = new ValidatorSentence();
        FuncArguments args = null;
        Token t1 = null;
    t1 = jj_consume_token(VALIDATOR);
    jj_consume_token(L_PARENTHESIS);
    args = funcArguments();
    jj_consume_token(R_PARENTHESIS);
                sentence.setLine(t1.beginLine);
                sentence.setLinePosition(t1.beginColumn);

                sentence.setArgs(args);

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public FuncDeclarations funcDeclarations() throws ParseException {
        FuncDeclarations declarations = new FuncDeclarations(this.filePath);
        FunctionDeclaration declare = null;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      declare = functionDeclare();
                        declarations.addFunction(declare);
    }
                {if (true) return declarations;}
    throw new Error("Missing return statement in function");
  }

  final public FunctionDeclaration functionDeclare() throws ParseException {
        FunctionDeclaration funcDeclare = new FunctionDeclaration(this.filePath);
        ArgumentsDeclare arg = null;

        Token retToken = null;
        DomPathElement packageName = null;
        DomPathElement funcName = null;
    retToken = jj_consume_token(FUNCTION);
    if (jj_2_2(2)) {
      packageName = domPathElement();
      jj_consume_token(DOT);
    } else {
      ;
    }
    funcName = domPathElement();
    jj_consume_token(L_PARENTHESIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR:
    case AT_MARK:
      arg = argumentsDeclare();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(R_PARENTHESIS);
    jj_consume_token(L_BRACE);
    sentences(funcDeclare);
    jj_consume_token(R_BRACE);
                funcDeclare.setLine(retToken.beginLine);
                funcDeclare.setLinePosition(retToken.beginColumn);

                funcDeclare.setReturnType(retToken.image);

                if(packageName != null){
                        funcDeclare.setPackageName(packageName.getImage());
                }

                funcDeclare.setFuncName(funcName.getImage());
                if(arg != null){
                        funcDeclare.setArguments(arg);
                }

                {if (true) return funcDeclare;}
    throw new Error("Missing return statement in function");
  }

  final public ArgumentsDeclare argumentsDeclare() throws ParseException {
        ArgumentsDeclare argDec = new ArgumentsDeclare();
        ArgumentDeclare dec = null;
        Token prefix = null;
        DomPathElement name = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR:
      prefix = jj_consume_token(DOLLAR);
      break;
    case AT_MARK:
      prefix = jj_consume_token(AT_MARK);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    name = domPathElement();
                dec = new ArgumentDeclare();

                dec.setPrefix(prefix.image);
                dec.setName(name.getImage());

                argDec.addArgument(dec);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLLAR:
        prefix = jj_consume_token(DOLLAR);
        break;
      case AT_MARK:
        prefix = jj_consume_token(AT_MARK);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      name = domPathElement();
                        dec = new ArgumentDeclare();

                        dec.setPrefix(prefix.image);
                        dec.setName(name.getImage());

                        argDec.addArgument(dec);
    }
                {if (true) return argDec;}
    throw new Error("Missing return statement in function");
  }

  final public void sentences(IScriptBlock parent) throws ParseException {
        IScriptSentence stnc;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUSPLUS:
      case MINUSMINUS:
      case DOLLAR:
      case AT_MARK:
      case SELECT:
      case INSERT:
      case UPDATE:
      case DELETE:
      case INTO:
      case FROM:
      case WHERE:
      case OR:
      case AND:
      case LIKE:
      case ESCAPE:
      case LEFT:
      case RIGHT:
      case NATURAL:
      case INNER:
      case OUTER:
      case FULL:
      case JOIN:
      case CROSS:
      case SET:
      case VALUES:
      case IF:
      case GROUP:
      case BY:
      case HAVING:
      case ORDER:
      case ASC:
      case DESC:
      case LIMIT:
      case OFFSET:
      case ON:
      case SQL_NOT:
      case AS:
      case DISTINCT:
      case IN:
      case BETWEEN:
      case IS:
      case BEGIN:
      case PREPARE:
      case COMMIT:
      case END:
      case ROLLBACK:
      case CREATE:
      case DROP:
      case ALTER:
      case ADD:
      case RENAME:
      case CHECK:
      case RETURNS:
      case SETOF:
      case LANGUAGE:
      case REPLACE:
      case INDEX:
      case USING:
      case EACH:
      case ROW:
      case STATEMENT:
      case EXECUTE:
      case PROCEDURE:
      case EXISTS:
      case TRIGGER:
      case BEFORE:
      case AFTER:
      case FOREIGN:
      case REFERENCES:
      case TRUE:
      case FALSE:
      case BOOL:
      case NULL:
      case RETURN:
      case USE:
      case WHILE:
      case DO:
      case FOR:
      case BREAK:
      case CONTINUE:
      case TRY:
      case DOWNLOAD:
      case REDIRECT:
      case SYNCHRONIZED:
      case THROW:
      case PARALLEL:
      case LOCAL:
      case IDENTIFIER:
      case NUMERIC:
      case DOUBLE:
      case DQSTRLIT:
      case SQSTRLIT:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      if (jj_2_3(3)) {
        stnc = sentence();
        jj_consume_token(SEMI_COLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case DO:
        case FOR:
        case TRY:
        case SYNCHRONIZED:
        case PARALLEL:
          stnc = block();
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                 parent.addSentence(stnc);
    }
  }

  final public IScriptSentence sentence() throws ParseException {
        IScriptSentence sentence;
        Token t1 = null;
    if (jj_2_4(3)) {
      sentence = commitSentence();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PREPARE:
        sentence = prepareTransactionSentence();
        break;
      case BEGIN:
        sentence = beginSentence();
        break;
      case ROLLBACK:
        sentence = rollbackSentence();
        break;
      default:
        jj_la1[13] = jj_gen;
        if (jj_2_5(2)) {
          sentence = select();
        } else if (jj_2_6(2)) {
          sentence = update();
        } else if (jj_2_7(2)) {
          sentence = delete();
        } else if (jj_2_8(2)) {
          sentence = insert();
        } else if (jj_2_9(3)) {
          sentence = substituteSentence();
        } else if (jj_2_10(3)) {
          sentence = functionCallSentence();
        } else if (jj_2_11(3)) {
          sentence = returnSentence();
        } else if (jj_2_12(3)) {
          sentence = redirectSentence();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOWNLOAD:
            sentence = downloadSentence();
            break;
          case BREAK:
            sentence = breakSentence();
            break;
          case CONTINUE:
            sentence = continueSentence();
            break;
          case USE:
            sentence = useSentence();
            break;
          case THROW:
            sentence = throwSentence();
            break;
          case CREATE:
            t1 = jj_consume_token(CREATE);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case TABLE:
              sentence = createTableSentence(t1);
              break;
            case OR:
            case FUNCTION:
              sentence = createFunctionSentence(t1);
              break;
            case TRIGGER:
              sentence = createTriggerSentence(t1);
              break;
            case INDEX:
              sentence = createIndexCentence(t1);
              break;
            default:
              jj_la1[11] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          case DROP:
            t1 = jj_consume_token(DROP);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case TABLE:
              sentence = dropTableSentence(t1);
              break;
            case FUNCTION:
              sentence = dropFunctionSentence(t1);
              break;
            case TRIGGER:
              sentence = dropTriggerSentence(t1);
              break;
            case INDEX:
              sentence = dropIndexSentence(t1);
              break;
            default:
              jj_la1[12] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          case ALTER:
            sentence = alterTableSentence();
            break;
          case PLUSPLUS:
          case MINUSMINUS:
          case DOLLAR:
          case AT_MARK:
          case SELECT:
          case INSERT:
          case UPDATE:
          case DELETE:
          case INTO:
          case FROM:
          case WHERE:
          case OR:
          case AND:
          case LIKE:
          case ESCAPE:
          case LEFT:
          case RIGHT:
          case NATURAL:
          case INNER:
          case OUTER:
          case FULL:
          case JOIN:
          case CROSS:
          case SET:
          case VALUES:
          case GROUP:
          case BY:
          case HAVING:
          case ORDER:
          case ASC:
          case DESC:
          case LIMIT:
          case OFFSET:
          case ON:
          case SQL_NOT:
          case AS:
          case DISTINCT:
          case IN:
          case BETWEEN:
          case IS:
          case ADD:
          case RENAME:
          case CHECK:
          case RETURNS:
          case SETOF:
          case LANGUAGE:
          case REPLACE:
          case INDEX:
          case USING:
          case EACH:
          case ROW:
          case STATEMENT:
          case EXECUTE:
          case PROCEDURE:
          case EXISTS:
          case TRIGGER:
          case BEFORE:
          case AFTER:
          case FOREIGN:
          case REFERENCES:
          case TRUE:
          case FALSE:
          case BOOL:
          case NULL:
          case PARALLEL:
          case IDENTIFIER:
          case NUMERIC:
          case DOUBLE:
          case DQSTRLIT:
          case SQSTRLIT:
            sentence = plusPlusSentence();
            break;
          case LOCAL:
            sentence = localSentence();
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public IScriptSentence block() throws ParseException {
        IScriptSentence sentence = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      sentence = ifBlock();
      break;
    case WHILE:
      sentence = whileBlock();
      break;
    case DO:
      sentence = doWhileBlock();
      break;
    case FOR:
      sentence = forBlock();
      break;
    case SYNCHRONIZED:
      sentence = synchronizedBlock();
      break;
    case PARALLEL:
      sentence = parallelBlock();
      break;
    case TRY:
      sentence = tryBlock();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public ParallelBlock parallelBlock() throws ParseException {
        ParallelBlock parallelBlock = new ParallelBlock(this.filePath);
        Token t_parallel = null;
        IStatement stmt = null;

        IVariableDescription operand = null;
    t_parallel = jj_consume_token(PARALLEL);
    jj_consume_token(L_PARENTHESIS);
    stmt = statement();
    jj_consume_token(R_PARENTHESIS);
    jj_consume_token(L_BRACE);
    sentences(parallelBlock);
    jj_consume_token(R_BRACE);
                parallelBlock.setLine(t_parallel.beginLine);
                parallelBlock.setLinePosition(t_parallel.beginColumn);

                parallelBlock.setStmt(stmt);
                parallelBlock.setOperand(operand);

                {if (true) return parallelBlock;}
    throw new Error("Missing return statement in function");
  }

  final public TryBlock tryBlock() throws ParseException {
        TryBlock tryblock = new TryBlock(this.filePath);
        CatchBlock catchBlock = new CatchBlock(this.filePath);
        VariableDescriptor variableDesc = null;
        FinallyBlock finallyBlock = new FinallyBlock(this.filePath);
        Token t_try = null;
        Token t_catch = null;
        Token t_finally = null;
    t_try = jj_consume_token(TRY);
    jj_consume_token(L_BRACE);
    sentences(tryblock);
    jj_consume_token(R_BRACE);
                tryblock.setLine(t_try.beginLine);
                tryblock.setLinePosition(t_try.beginColumn);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CATCH:
      t_catch = jj_consume_token(CATCH);
      jj_consume_token(L_PARENTHESIS);
      variableDesc = scriptVariable();
      jj_consume_token(R_PARENTHESIS);
      jj_consume_token(L_BRACE);
      sentences(catchBlock);
      jj_consume_token(R_BRACE);
                        catchBlock.setLine(t_catch.beginLine);
                        catchBlock.setLinePosition(t_catch.beginColumn);

                        catchBlock.setVariableDescriptor(variableDesc);

                        tryblock.setCatchBlock(catchBlock);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
      t_finally = jj_consume_token(FINALLY);
      jj_consume_token(L_BRACE);
      sentences(finallyBlock);
      jj_consume_token(R_BRACE);
                        finallyBlock.setLine(t_finally.beginLine);
                        finallyBlock.setLinePosition(t_finally.beginColumn);

                        tryblock.setFinallyBlock(finallyBlock);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
                {if (true) return tryblock;}
    throw new Error("Missing return statement in function");
  }

  final public BeginSentence beginSentence() throws ParseException {
        BeginSentence sentence = new BeginSentence();
        Identifier level1 = null;
        Identifier level2 = null;

        Token t = null;
    t = jj_consume_token(BEGIN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRANSACTION:
      jj_consume_token(TRANSACTION);
      jj_consume_token(ISOLATION);
      jj_consume_token(LEVEL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        level1 = identifier();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          level2 = identifier();
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
                sentence.setLine(t.beginLine);
                sentence.setLinePosition(t.beginColumn);

                sentence.setLevel1(level1);
                sentence.setLevel2(level2);

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public PrepareTransactionSentence prepareTransactionSentence() throws ParseException {
        PrepareTransactionSentence sentence = new PrepareTransactionSentence();
        IStatement trxIdentifier = null;
        Token t = null;
    t = jj_consume_token(PREPARE);
    jj_consume_token(TRANSACTION);
    trxIdentifier = statement();
                sentence.setLine(t.beginLine);
                sentence.setLinePosition(t.beginColumn);

                sentence.setTrxIdentifier(trxIdentifier);

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public CommitSentence commitSentence() throws ParseException {
        CommitSentence sentence = new CommitSentence();
        IStatement trxIdentifier = null;
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMIT:
      t = jj_consume_token(COMMIT);
      break;
    case END:
      t = jj_consume_token(END);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PREPARED:
      jj_consume_token(PREPARED);
      trxIdentifier = statement();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
                sentence.setLine(t.beginLine);
                sentence.setLinePosition(t.beginColumn);

                sentence.setTrxIdentifier(trxIdentifier);

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public RollbackSentence rollbackSentence() throws ParseException {
        RollbackSentence sentence = new RollbackSentence();
        IStatement trxIdentifier = null;
        Token t = null;
    t = jj_consume_token(ROLLBACK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PREPARED:
      jj_consume_token(PREPARED);
      trxIdentifier = statement();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
                sentence.setLine(t.beginLine);
                sentence.setLinePosition(t.beginColumn);

                sentence.setTrxIdentifier(trxIdentifier);

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public SelectSentence select() throws ParseException {
        SelectSentence sentence = new SelectSentence();
        SelectColumns columns = null;
        IntoClause into = null;
        FromClause from = null;
        WhereClause where = null;
        GroupByClause grp = null;
        OrderByClause ord = null;
        LimitOffsetClause limitoffset = null;
        ForUpdateClause forUpdate = null;
        AdjustWhere adjustWhere = new AdjustWhere();

        Token distinctToken = null;

        Token t = null;
    t = jj_consume_token(SELECT);
    if (jj_2_13(2)) {
      distinctToken = jj_consume_token(DISTINCT);
    } else {
      ;
    }
    columns = selectColumns();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTO:
      into = into();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FROM:
      from = from();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      where = where();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GROUP:
      grp = groupby();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDER:
      ord = orderby();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    limitoffset = limit();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOR:
      forUpdate = forUpdate();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADJUST_WHERE:
      adjustWhere = adjustWhere();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
                sentence.setColumns(columns);
                sentence.setInto(into);
                sentence.setFrom(from);
                sentence.setWhere(where);
                sentence.setGroupBy(grp);
                sentence.setOrderby(ord);
                sentence.setLimitOffset(limitoffset);
                sentence.setForUpdate(forUpdate);
                sentence.setAdjustWhere(adjustWhere);

                if(distinctToken != null){
                        sentence.setDistinct(distinctToken.image);
                }

                sentence.setLine(t.beginLine);
                sentence.setLinePosition(t.beginColumn);

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public ForUpdateClause forUpdate() throws ParseException {
        ForUpdateClause forUpdate = new ForUpdateClause();
        Token type = null;
        Token nowait = null;
        TablesList tables = null;
    jj_consume_token(FOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UPDATE:
      type = jj_consume_token(UPDATE);
      break;
    case SHARE:
      type = jj_consume_token(SHARE);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OF:
      jj_consume_token(OF);
      tables = tables();
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOWAIT:
      nowait = jj_consume_token(NOWAIT);
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
                forUpdate.setType(type.image);

                if(nowait != null){
                        forUpdate.setWait(nowait.image);
                }

                if(tables != null){
                        forUpdate.setTables(tables);
                }

                {if (true) return forUpdate;}
    throw new Error("Missing return statement in function");
  }

  final public LimitOffsetClause limit() throws ParseException {
        LimitOffsetClause limitoffset = new LimitOffsetClause();
        ISQLStatement limit = null;
        ISQLStatement offset = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIMIT:
      jj_consume_token(LIMIT);
      limit = variable();
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OFFSET:
      jj_consume_token(OFFSET);
      offset = variable();
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
                if(limit != null){
                        limitoffset.setLimit(limit);
                }
                if(offset != null){
                        limitoffset.setOffset(offset);
                }

                {if (true) return limitoffset;}
    throw new Error("Missing return statement in function");
  }

  final public OrderByClause orderby() throws ParseException {
        OrderByClause ord = new OrderByClause();
        ColumnList colList = null;
    jj_consume_token(ORDER);
    jj_consume_token(BY);
    colList = columnList();
                ord.setColumnList(colList);

                {if (true) return ord;}
    throw new Error("Missing return statement in function");
  }

  final public ColumnList columnList() throws ParseException {
        ColumnList colList = new ColumnList();
        ColumnIdentifier col;
        Token t = null;
        SQLVariable variable = null;
        IPathElement pathElement = null;
        SelectColumnElement colEl = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      col = columnIdentifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
      case DESC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASC:
          t = jj_consume_token(ASC);
          break;
        case DESC:
          t = jj_consume_token(DESC);
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
                        colList = new ColumnList();

                        if(t != null){
                                colList.addColumns(col, t.image);
                        }
                        else{
                                colList.addColumns(col);
                        }
      break;
    case DOLLAR:
      jj_consume_token(DOLLAR);
      pathElement = domPath();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
      case DESC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASC:
          t = jj_consume_token(ASC);
          break;
        case DESC:
          t = jj_consume_token(DESC);
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
                        colList = new ColumnList();

                        variable = new SQLVariable();
                        variable.setPathElement(pathElement);
                        variable.setPrefix("$");

                        colEl = new SelectColumnElement();
                        colEl.setColumnName(variable);

                        if(t != null){
                                colList.addColumns(colEl, t.image);
                        }
                        else{
                                colList.addColumns(colEl);
                        }
      break;
    case AT_MARK:
      jj_consume_token(AT_MARK);
      pathElement = domPath();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
      case DESC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASC:
          t = jj_consume_token(ASC);
          break;
        case DESC:
          t = jj_consume_token(DESC);
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
                        colList = new ColumnList();

                        variable = new SQLVariable();
                        variable.setPathElement(pathElement);
                        variable.setPrefix("@");

                        colEl = new SelectColumnElement();
                        colEl.setColumnName(variable);

                        if(t != null){
                                colList.addColumns(colEl, t.image);
                        }
                        else{
                                colList.addColumns(colEl);
                        }
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        col = columnIdentifier();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASC:
        case DESC:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASC:
            t = jj_consume_token(ASC);
            break;
          case DESC:
            t = jj_consume_token(DESC);
            break;
          default:
            jj_la1[44] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[45] = jj_gen;
          ;
        }
                                if(t != null){
                                        colList.addColumns(col, t.image);
                                }
                                else{
                                        colList.addColumns(col);
                                }
        break;
      case DOLLAR:
        jj_consume_token(DOLLAR);
        pathElement = domPath();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASC:
        case DESC:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASC:
            t = jj_consume_token(ASC);
            break;
          case DESC:
            t = jj_consume_token(DESC);
            break;
          default:
            jj_la1[46] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[47] = jj_gen;
          ;
        }
                                variable = new SQLVariable();
                                variable.setPathElement(pathElement);
                                variable.setPrefix("$");

                                colEl = new SelectColumnElement();
                                colEl.setColumnName(variable);

                                if(t != null){
                                        colList.addColumns(colEl, t.image);
                                }
                                else{
                                        colList.addColumns(colEl);
                                }
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return colList;}
    throw new Error("Missing return statement in function");
  }

  final public GroupByClause groupby() throws ParseException {
        GroupByClause grp = new GroupByClause();
        ColumnList colList = null;
        HavingClause having = null;
    jj_consume_token(GROUP);
    jj_consume_token(BY);
    colList = columnList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HAVING:
      having = having();
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
                grp.setColList(colList);
                grp.setHaving(having);

                {if (true) return grp;}
    throw new Error("Missing return statement in function");
  }

  final public HavingClause having() throws ParseException {
        HavingClause having = new HavingClause();
        ISQLExpression exp = null;
    jj_consume_token(HAVING);
    exp = orExp();
                having.setExpression(exp);
                {if (true) return having;}
    throw new Error("Missing return statement in function");
  }

  final public SelectColumns selectColumns() throws ParseException {
        SelectColumns cols = new SelectColumns();
        ColumnList colList;
        ISQLStatement col;
        SelectColumnElement colElement = null;
        Identifier asId = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASTERISK:
      jj_consume_token(ASTERISK);
                {if (true) return cols;}
      break;
    case L_PARENTHESIS:
    case SELECT:
    case INSERT:
    case UPDATE:
    case DELETE:
    case INTO:
    case FROM:
    case WHERE:
    case OR:
    case AND:
    case LIKE:
    case ESCAPE:
    case LEFT:
    case RIGHT:
    case NATURAL:
    case INNER:
    case OUTER:
    case FULL:
    case JOIN:
    case CROSS:
    case SET:
    case VALUES:
    case GROUP:
    case BY:
    case HAVING:
    case ORDER:
    case ASC:
    case DESC:
    case LIMIT:
    case OFFSET:
    case ON:
    case SQL_NOT:
    case AS:
    case DISTINCT:
    case IN:
    case BETWEEN:
    case IS:
    case ADD:
    case CHECK:
    case RETURNS:
    case SETOF:
    case LANGUAGE:
    case REPLACE:
    case INDEX:
    case USING:
    case EACH:
    case ROW:
    case STATEMENT:
    case EXECUTE:
    case PROCEDURE:
    case EXISTS:
    case TRIGGER:
    case BEFORE:
    case AFTER:
    case FOREIGN:
    case REFERENCES:
    case IDENTIFIER:
      if (jj_2_14(2)) {
        col = sqlFunctionCall();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          col = columnIdentifier();
          break;
        case L_PARENTHESIS:
          col = sqlSubQuery();
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_15(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
          break;
        default:
          jj_la1[51] = jj_gen;
          ;
        }
        asId = identifier();
      } else {
        ;
      }
                colList = new ColumnList();

                colElement = new SelectColumnElement();
                colElement.setColumnName(col);

                if(asId != null){
                        colElement.setAsName(asId);
                        asId = null;
                }

                colList.addColumns(colElement);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[52] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        if (jj_2_16(2)) {
          col = sqlFunctionCall();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            col = columnIdentifier();
            break;
          case L_PARENTHESIS:
            col = sqlSubQuery();
            break;
          default:
            jj_la1[53] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        if (jj_2_17(2)) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AS:
            jj_consume_token(AS);
            break;
          default:
            jj_la1[54] = jj_gen;
            ;
          }
          asId = identifier();
        } else {
          ;
        }
                        colElement = new SelectColumnElement();
                        colElement.setColumnName(col);

                        if(asId != null){
                                colElement.setAsName(asId);
                                asId = null;
                        }

                        colList.addColumns(colElement);
      }
                cols.setColumns(colList);

                {if (true) return cols;}
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IntoClause into() throws ParseException {
        IntoClause into = new IntoClause();
        Identifier val = new Identifier();
        Token t = null;
    jj_consume_token(INTO);
    t = jj_consume_token(IDENTIFIER);
                val.setName(t.image);
                into.setVariable(val);

                {if (true) return into;}
    throw new Error("Missing return statement in function");
  }

  final public FromClause from() throws ParseException {
        FromClause from = new FromClause();
        TablesList tableList = null;
        SelectSentence selectSentence = null;
        Identifier asId = null;
    jj_consume_token(FROM);
    if (jj_2_18(2)) {
      tableList = tables();
                                from.setTableList(tableList);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case L_PARENTHESIS:
        jj_consume_token(L_PARENTHESIS);
        selectSentence = select();
        jj_consume_token(R_PARENTHESIS);
        jj_consume_token(AS);
        asId = identifier();
                                from.setSelectSentence(selectSentence);
                                from.setAsId(asId);
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return from;}
    throw new Error("Missing return statement in function");
  }

  final public TablesList tables() throws ParseException {
        TablesList tblList = new TablesList();
        ISQLScriptObject tbl = null;
    tbl = select_table();
                tblList.addTable(tbl);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      tbl = select_table();
                        tblList.addTable(tbl);
    }
                {if (true) return tblList;}
    throw new Error("Missing return statement in function");
  }

  final public TableIdentifier table() throws ParseException {
        TableIdentifier tbl = new TableIdentifier();
        Token t1 = null;
        Token t2 = null;
        Token t3 = null;
        SQLVariable variable = null;
        IPathElement pathElement = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR:
      jj_consume_token(DOLLAR);
      pathElement = domPath();
                        variable = new SQLVariable();
                        variable.setPathElement(pathElement);
                        variable.setPrefix("$");

                        tbl.setVariable(variable);
      break;
    case IDENTIFIER:
      t1 = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        t2 = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_19(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      t3 = jj_consume_token(IDENTIFIER);
    } else {
      ;
    }
                if(t2 == null && t1 != null){
                        tbl.setTableName(t1.image);
                }else if(t1 != null){
                        tbl.setDatabaseName(t1.image);
                        tbl.setTableName(t2 != null ? t2.image : null);
                }

                if(t3 != null){
                        tbl.setAsName(t3.image);
                }


                {if (true) return tbl;}
    throw new Error("Missing return statement in function");
  }

  final public ISQLScriptObject select_table() throws ParseException {
        ISQLScriptObject j1 = null;
    j1 = join();
                {if (true) return j1;}
    throw new Error("Missing return statement in function");
  }

  final public ISQLScriptObject join() throws ParseException {
        JoinClause join = null;
        ISQLScriptObject left = null;
        ISQLScriptObject right = null;
        JoinCondition cnd = null;
    left = joinTarget();

    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT:
    case RIGHT:
    case NATURAL:
    case INNER:
    case JOIN:
    case CROSS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JOIN:
        jj_consume_token(JOIN);
        right = joinTarget();
        cnd = joinCondition();
                join = new JoinClause();
                join.setJoinType(JoinClause.DEFAULT);
                join.setLeft(left);
                join.setRight(right);
                join.setCondition(cnd);
        break;
      case INNER:
        jj_consume_token(INNER);
        jj_consume_token(JOIN);
        right = joinTarget();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ON:
          cnd = joinCondition();
          break;
        default:
          jj_la1[61] = jj_gen;
          ;
        }
                join = new JoinClause();
                join.setJoinType(JoinClause.INNER_JOIN);
                join.setLeft(left);
                join.setRight(right);
                join.setCondition(cnd);
        break;
      case LEFT:
        jj_consume_token(LEFT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OUTER:
          jj_consume_token(OUTER);
          break;
        default:
          jj_la1[62] = jj_gen;
          ;
        }
        jj_consume_token(JOIN);
        right = joinTarget();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ON:
          cnd = joinCondition();
          break;
        default:
          jj_la1[63] = jj_gen;
          ;
        }
                join = new JoinClause();
                join.setJoinType(JoinClause.LEFT_JOIN);
                join.setLeft(left);
                join.setRight(right);
                join.setCondition(cnd);
        break;
      case RIGHT:
        jj_consume_token(RIGHT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OUTER:
          jj_consume_token(OUTER);
          break;
        default:
          jj_la1[64] = jj_gen;
          ;
        }
        jj_consume_token(JOIN);
        right = joinTarget();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ON:
          cnd = joinCondition();
          break;
        default:
          jj_la1[65] = jj_gen;
          ;
        }
                join = new JoinClause();
                join.setJoinType(JoinClause.RIGHT_JOIN);
                join.setLeft(left);
                join.setRight(right);
                join.setCondition(cnd);
        break;
      case NATURAL:
        jj_consume_token(NATURAL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT:
        case RIGHT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RIGHT:
            jj_consume_token(RIGHT);
            break;
          case LEFT:
            jj_consume_token(LEFT);
            break;
          default:
            jj_la1[66] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OUTER:
            jj_consume_token(OUTER);
            break;
          default:
            jj_la1[67] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[68] = jj_gen;
          ;
        }
        jj_consume_token(JOIN);
        right = joinTarget();
                join = new JoinClause();
                join.setJoinType(JoinClause.NATURAL_JOIN);
                join.setLeft(left);
                join.setRight(right);
        break;
      case CROSS:
        jj_consume_token(CROSS);
        jj_consume_token(JOIN);
        right = joinTarget();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ON:
          cnd = joinCondition();
          break;
        default:
          jj_la1[69] = jj_gen;
          ;
        }
                join = new JoinClause();
                join.setJoinType(JoinClause.CROSS_JOIN);
                join.setLeft(left);
                join.setRight(right);
                join.setCondition(cnd);
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
                if(join == null){
                        {if (true) return left;}
                }
                {if (true) return join;}
    throw new Error("Missing return statement in function");
  }

  final public ISQLScriptObject joinTarget() throws ParseException {
        ISQLScriptObject target = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR:
    case IDENTIFIER:
      target = table();
      break;
    default:
      jj_la1[72] = jj_gen;
      if (jj_2_20(2)) {
        target = joinSubQueryTarget();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case L_PARENTHESIS:
          jj_consume_token(L_PARENTHESIS);
          target = join();
          jj_consume_token(R_PARENTHESIS);
          break;
        default:
          jj_la1[73] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
                {if (true) return target;}
    throw new Error("Missing return statement in function");
  }

  final public ISQLScriptObject joinSubQueryTarget() throws ParseException {
        JoinSubQueryTarget target = new JoinSubQueryTarget();
        SelectSentence selectSentence = null;
        Token t = null;
    jj_consume_token(L_PARENTHESIS);
    selectSentence = select();
    jj_consume_token(R_PARENTHESIS);
    jj_consume_token(AS);
    t = jj_consume_token(IDENTIFIER);
                target.setSelectSentence(selectSentence);
                target.setAsName(t.image);
                {if (true) return target;}
    throw new Error("Missing return statement in function");
  }

  final public JoinCondition joinCondition() throws ParseException {
        JoinCondition cnd = new JoinCondition();
        ISQLExpression exp = null;
    jj_consume_token(ON);
    exp = orExp();
                cnd.setExpression(exp);
                {if (true) return cnd;}
    throw new Error("Missing return statement in function");
  }

  final public WhereClause where() throws ParseException {
        WhereClause where = new WhereClause();
        ISQLExpression exp = null;
    jj_consume_token(WHERE);
    exp = orExp();
                where.setExpression(exp);

                {if (true) return where;}
    throw new Error("Missing return statement in function");
  }

  final public ISQLExpression orExp() throws ParseException {
        ISQLExpression fexp = null;
        ISQLExpression exp = null;
        OrExpression or = null;
    fexp = andExp();
    label_9:
    while (true) {
      if (jj_2_21(2)) {
        ;
      } else {
        break label_9;
      }
      jj_consume_token(OR);
      exp = andExp();
                if(or == null){
                        or = new OrExpression();
                        or.addExpressions(fexp);
                }

                or.addExpressions(exp);
    }
                if(or != null){
                        {if (true) return or;}
                }
                {if (true) return fexp;}
    throw new Error("Missing return statement in function");
  }

  final public ISQLExpression andExp() throws ParseException {
        ISQLExpression fexp = null;
        ISQLExpression exp = null;
        AndExpression and = null;
    fexp = parenthesisExp();
    label_10:
    while (true) {
      if (jj_2_22(2)) {
        ;
      } else {
        break label_10;
      }
      jj_consume_token(AND);
      exp = parenthesisExp();
                if(and == null){
                        and = new AndExpression();
                        and.addExpressions(fexp);
                }

                and.addExpressions(exp);
    }
                if(and != null){
                        {if (true) return and;}
                }
                {if (true) return fexp;}
    throw new Error("Missing return statement in function");
  }

  final public ISQLExpression parenthesisExp() throws ParseException {
        ISQLExpression exp = null;
    if (jj_2_23(2)) {
      jj_consume_token(L_PARENTHESIS);
      exp = orExp();
      jj_consume_token(R_PARENTHESIS);
                ParenthesisExpression pexp = new ParenthesisExpression();
                pexp.addExpressions(exp);

                {if (true) return pexp;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASTERISK:
      case L_PARENTHESIS:
      case DOLLAR:
      case AT_MARK:
      case SELECT:
      case INSERT:
      case UPDATE:
      case DELETE:
      case INTO:
      case FROM:
      case WHERE:
      case OR:
      case AND:
      case LIKE:
      case ESCAPE:
      case LEFT:
      case RIGHT:
      case NATURAL:
      case INNER:
      case OUTER:
      case FULL:
      case JOIN:
      case CROSS:
      case SET:
      case VALUES:
      case GROUP:
      case BY:
      case HAVING:
      case ORDER:
      case ASC:
      case DESC:
      case LIMIT:
      case OFFSET:
      case ON:
      case SQL_NOT:
      case AS:
      case DISTINCT:
      case IN:
      case BETWEEN:
      case IS:
      case ADD:
      case CHECK:
      case RETURNS:
      case SETOF:
      case LANGUAGE:
      case REPLACE:
      case INDEX:
      case USING:
      case EACH:
      case ROW:
      case STATEMENT:
      case EXECUTE:
      case PROCEDURE:
      case EXISTS:
      case TRIGGER:
      case BEFORE:
      case AFTER:
      case FOREIGN:
      case REFERENCES:
      case NULL:
      case IDENTIFIER:
      case NUMERIC:
      case DQSTRLIT:
      case SQSTRLIT:
        exp = sqlNotExpression();
                {if (true) return exp;}
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ISQLExpression sqlNotExpression() throws ParseException {
        SQLNotExpression sqlNotExp = null;
        ISQLExpression exp = null;
        ISQLStatement top = null;
    if (jj_2_24(2)) {
      jj_consume_token(SQL_NOT);
      exp = orExp();
                sqlNotExp = new SQLNotExpression();
                sqlNotExp.addExpressions(exp);

                {if (true) return sqlNotExp;}
    } else if (jj_2_25(2)) {
      exp = inClauseExpression();
                {if (true) return exp;}
    } else if (jj_2_26(2)) {
      top = sqlStatement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
        exp = inClauseExpression();
        break;
      case BETWEEN:
        exp = betweenClauseExpression();
        break;
      case IS:
        exp = isNullExpression();
        break;
      case EQUALS:
      case SQL_NOT_EQUALS:
      case AT_AT_MARK:
      case GT:
      case GEQ:
      case LT:
      case LEQ:
      case LIKE:
        exp = twoClauseExpression();
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                if(exp instanceof InClauseExpression){
                        ((InClauseExpression)exp).setTop(top);
                }
                else if(exp instanceof BetweenClauseExpression){
                        ((BetweenClauseExpression)exp).setTop(top);
                }
                else if(exp instanceof IsNullClauseExpression){
                        ((IsNullClauseExpression)exp).setStmt(top);
                }
                else if(exp instanceof TwoClauseExpression){
                        ((TwoClauseExpression)exp).setLeft(top);
                }
                else if(exp instanceof LikeExpression){
                        ((LikeExpression)exp).setLeft(top);
                }

                {if (true) return exp;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ISQLExpression isNullExpression() throws ParseException {
        IsNullClauseExpression exp = new IsNullClauseExpression();
        Token t  = null;
    jj_consume_token(IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SQL_NOT:
      t = jj_consume_token(SQL_NOT);
      break;
    default:
      jj_la1[76] = jj_gen;
      ;
    }
    jj_consume_token(NULL);
                if(t != null){
                        exp.setNot(true);
                }

                {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public ISQLExpression inClauseExpression() throws ParseException {
        InClauseExpression inClause = new InClauseExpression();

        Object inElement = null;
    jj_consume_token(IN);
    inElement = inElement();
                if(inElement instanceof VariableList){
                        inClause.setValList((VariableList)inElement);
                }
                else if(inElement instanceof SubQueryStatement){
                        inClause.setSubQuery((SubQueryStatement)inElement);
                }

                {if (true) return inClause;}
    throw new Error("Missing return statement in function");
  }

  final public Object inElement() throws ParseException {
        SubQueryStatement subQuery = null;
        SelectSentence selectSentence = null;

        VariableList vals = new VariableList();
        ISQLStatement val = null;
    jj_consume_token(L_PARENTHESIS);
    if (jj_2_27(3)) {
      val = variable();
                                             vals.addValues(val);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[77] = jj_gen;
          break label_11;
        }
        jj_consume_token(COMMA);
        val = variable();
                                         vals.addValues(val);
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        selectSentence = select();
        break;
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(R_PARENTHESIS);
                if(selectSentence != null){
                        subQuery = new SubQueryStatement();
                        subQuery.setSelectSentence(selectSentence);

                        {if (true) return subQuery;}
                }

                {if (true) return vals;}
    throw new Error("Missing return statement in function");
  }

  final public ISQLExpression betweenClauseExpression() throws ParseException {
        BetweenClauseExpression betweenClause = new BetweenClauseExpression();
        ISQLStatement left = null;
        ISQLStatement right = null;
    jj_consume_token(BETWEEN);
    if (jj_2_28(3)) {
      left = sqlStatement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        left = columnIdentifier();
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(AND);
    if (jj_2_29(3)) {
      right = sqlStatement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        right = columnIdentifier();
        break;
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                betweenClause.setLeft(left);
                betweenClause.setRight(right);

                {if (true) return betweenClause;}
    throw new Error("Missing return statement in function");
  }

  final public ISQLExpression twoClauseExpression() throws ParseException {
        TwoClauseExpression exp = null;
        LikeExpression likeExp = null;
        ISQLStatement right = null;
        ISQLStatement escape = null;
        Token op = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      op = jj_consume_token(EQUALS);
      break;
    case SQL_NOT_EQUALS:
      op = jj_consume_token(SQL_NOT_EQUALS);
      break;
    case GT:
      op = jj_consume_token(GT);
      break;
    case GEQ:
      op = jj_consume_token(GEQ);
      break;
    case LT:
      op = jj_consume_token(LT);
      break;
    case LEQ:
      op = jj_consume_token(LEQ);
      break;
    case AT_AT_MARK:
      op = jj_consume_token(AT_AT_MARK);
      break;
    case LIKE:
      op = jj_consume_token(LIKE);
      break;
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    right = sqlStatement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ESCAPE:
      jj_consume_token(ESCAPE);
      escape = variable();
      break;
    default:
      jj_la1[82] = jj_gen;
      ;
    }
                if(op.image.toUpperCase().equals("LIKE")){
                        likeExp = new LikeExpression();

                        likeExp.setRight(right);

                        if(escape != null){
                                likeExp.setEscape(escape);
                        }

                        {if (true) return likeExp;}
                }

                exp = new TwoClauseExpression();

                exp.setRight(right);
                exp.setOpe(op.image);


                {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public ISQLStatement sqlStatement() throws ParseException {
        SQLStatement stmt = new SQLStatement();
        ISQLStatement first = null;
        SQLSubStatement sub = null;
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case L_PARENTHESIS:
    case DOLLAR:
    case AT_MARK:
    case SELECT:
    case INSERT:
    case UPDATE:
    case DELETE:
    case INTO:
    case FROM:
    case WHERE:
    case OR:
    case AND:
    case LIKE:
    case ESCAPE:
    case LEFT:
    case RIGHT:
    case NATURAL:
    case INNER:
    case OUTER:
    case FULL:
    case JOIN:
    case CROSS:
    case SET:
    case VALUES:
    case GROUP:
    case BY:
    case HAVING:
    case ORDER:
    case ASC:
    case DESC:
    case LIMIT:
    case OFFSET:
    case ON:
    case SQL_NOT:
    case AS:
    case DISTINCT:
    case IN:
    case BETWEEN:
    case IS:
    case ADD:
    case CHECK:
    case RETURNS:
    case SETOF:
    case LANGUAGE:
    case REPLACE:
    case INDEX:
    case USING:
    case EACH:
    case ROW:
    case STATEMENT:
    case EXECUTE:
    case PROCEDURE:
    case EXISTS:
    case TRIGGER:
    case BEFORE:
    case AFTER:
    case FOREIGN:
    case REFERENCES:
    case NULL:
    case IDENTIFIER:
    case NUMERIC:
    case DQSTRLIT:
    case SQSTRLIT:
      if (jj_2_30(2)) {
        t = jj_consume_token(DISTINCT);
      } else {
        ;
      }
      first = sqlSubStatementOperand();
      if (jj_2_31(2)) {
        sub = sqlSubStatement();
      } else {
        ;
      }
                if(t != null){
                        stmt.setDistinct(t.image);
                }
                stmt.setFirstStmt(first);
                stmt.setSubStatement(sub);

                {if (true) return stmt;}
      break;
    case ASTERISK:
      jj_consume_token(ASTERISK);
                {if (true) return new SQLAllStatemtet();}
      break;
    default:
      jj_la1[83] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public SQLSubStatement sqlSubStatement() throws ParseException {
        SQLSubStatement subStmt = new SQLSubStatement();
        ISQLStatement operand = null;
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BIT_AND:
      t = jj_consume_token(BIT_AND);
      break;
    case BIT_OR:
      t = jj_consume_token(BIT_OR);
      break;
    case PLUS:
      t = jj_consume_token(PLUS);
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
      break;
    case DIV:
      t = jj_consume_token(DIV);
      break;
    case ASTERISK:
      t = jj_consume_token(ASTERISK);
      break;
    default:
      jj_la1[84] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    operand = sqlSubStatementOperand();
                subStmt.setOpe(t.image);
                subStmt.setStatement(operand);
                {if (true) return subStmt;}
    throw new Error("Missing return statement in function");
  }

  final public ISQLStatement sqlSubStatementOperand() throws ParseException {
        ISQLStatement opernd = null;
        SQLParenthesisStatement pStmt = null;
    if (jj_2_32(3)) {
      opernd = variable();
                {if (true) return opernd;}
    } else if (jj_2_33(3)) {
      opernd = columnIdentifier();
                {if (true) return opernd;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
      case INSERT:
      case UPDATE:
      case DELETE:
      case INTO:
      case FROM:
      case WHERE:
      case OR:
      case AND:
      case LIKE:
      case ESCAPE:
      case LEFT:
      case RIGHT:
      case NATURAL:
      case INNER:
      case OUTER:
      case FULL:
      case JOIN:
      case CROSS:
      case SET:
      case VALUES:
      case GROUP:
      case BY:
      case HAVING:
      case ORDER:
      case ASC:
      case DESC:
      case LIMIT:
      case OFFSET:
      case ON:
      case SQL_NOT:
      case AS:
      case DISTINCT:
      case IN:
      case BETWEEN:
      case IS:
      case ADD:
      case CHECK:
      case RETURNS:
      case SETOF:
      case LANGUAGE:
      case REPLACE:
      case INDEX:
      case USING:
      case EACH:
      case ROW:
      case STATEMENT:
      case EXECUTE:
      case PROCEDURE:
      case EXISTS:
      case TRIGGER:
      case BEFORE:
      case AFTER:
      case FOREIGN:
      case REFERENCES:
      case IDENTIFIER:
        opernd = sqlFunctionCall();
                {if (true) return opernd;}
        break;
      case L_PARENTHESIS:
        jj_consume_token(L_PARENTHESIS);
        opernd = sqlStatement();
        jj_consume_token(R_PARENTHESIS);
                pStmt = new SQLParenthesisStatement();
                pStmt.setStmt(opernd);

                {if (true) return pStmt;}
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ColumnIdentifier columnIdentifier() throws ParseException {
        ColumnIdentifier id = new ColumnIdentifier();
        Token t1 = null;
        Token t2 = null;
        Token t3 = null;
        Token t4 = null;
    t1 = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      t2 = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        t3 = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[86] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[87] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      jj_consume_token(COLON);
      t4 = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[88] = jj_gen;
      ;
    }
                if(t2 != null && t3 != null){
                        id.setDatabaseName(t1.image);
                        id.setTableName(t2.image);
                        id.setColumnName(t3.image);
                }else if(t2 != null && t3 == null){
                        id.setTableName(t1.image);
                        id.setColumnName(t2.image);
                }else{
                        id.setColumnName(t1.image);
                }

                // cast
                if(t4 != null){
                        id.setCastType(t4.image);
                }

                {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public ISQLStatement variable() throws ParseException {
        Token t = null;
        IPathElement pathElement = null;
        ISQLStatement stmt = null;
        SQLVariable variable = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR:
      jj_consume_token(DOLLAR);
      pathElement = domPath();
                variable = new SQLVariable();
                variable.setPathElement(pathElement);
                variable.setPrefix("$");

                {if (true) return variable;}
      break;
    case AT_MARK:
      jj_consume_token(AT_MARK);
      pathElement = domPath();
                variable = new SQLVariable();
                variable.setPathElement(pathElement);
                variable.setPrefix("@");

                {if (true) return variable;}
      break;
    case DQSTRLIT:
    case SQSTRLIT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DQSTRLIT:
        t = jj_consume_token(DQSTRLIT);
        break;
      case SQSTRLIT:
        t = jj_consume_token(SQSTRLIT);
        break;
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                SQLStringConst strvariable = new SQLStringConst();
                strvariable.setStr(t.image);

                {if (true) return strvariable;}
      break;
    case NUMERIC:
      t = jj_consume_token(NUMERIC);
                SQLNumericConst numericVal = new SQLNumericConst();
                numericVal.setNumber(t.image);

                {if (true) return numericVal;}
      break;
    case NULL:
      t = jj_consume_token(NULL);
                SQLNullConst nullConst = new SQLNullConst();

                {if (true) return nullConst;}
      break;
    case SELECT:
    case INSERT:
    case UPDATE:
    case DELETE:
    case INTO:
    case FROM:
    case WHERE:
    case OR:
    case AND:
    case LIKE:
    case ESCAPE:
    case LEFT:
    case RIGHT:
    case NATURAL:
    case INNER:
    case OUTER:
    case FULL:
    case JOIN:
    case CROSS:
    case SET:
    case VALUES:
    case GROUP:
    case BY:
    case HAVING:
    case ORDER:
    case ASC:
    case DESC:
    case LIMIT:
    case OFFSET:
    case ON:
    case SQL_NOT:
    case AS:
    case DISTINCT:
    case IN:
    case BETWEEN:
    case IS:
    case ADD:
    case CHECK:
    case RETURNS:
    case SETOF:
    case LANGUAGE:
    case REPLACE:
    case INDEX:
    case USING:
    case EACH:
    case ROW:
    case STATEMENT:
    case EXECUTE:
    case PROCEDURE:
    case EXISTS:
    case TRIGGER:
    case BEFORE:
    case AFTER:
    case FOREIGN:
    case REFERENCES:
    case IDENTIFIER:
      stmt = sqlFunctionCall();
                {if (true) return stmt;}
      break;
    case L_PARENTHESIS:
      stmt = sqlSubQuery();
                {if (true) return stmt;}
      break;
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ISQLStatement sqlSubQuery() throws ParseException {
        SubQueryStatement subQuery = new SubQueryStatement();
        SelectSentence selectSentence = null;
    jj_consume_token(L_PARENTHESIS);
    selectSentence = select();
    jj_consume_token(R_PARENTHESIS);
                subQuery.setSelectSentence(selectSentence);

                {if (true) return subQuery;}
    throw new Error("Missing return statement in function");
  }

  final public ISQLStatement sqlFunctionCall() throws ParseException {
        SQLFunctionCallStatement funcCall = new SQLFunctionCallStatement();
        SQLFunctionCallArguments arguments = null;

        Token t = null;
    t = sqlFuncNameElement();
    jj_consume_token(L_PARENTHESIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASTERISK:
    case L_PARENTHESIS:
    case DOLLAR:
    case AT_MARK:
    case SELECT:
    case INSERT:
    case UPDATE:
    case DELETE:
    case INTO:
    case FROM:
    case WHERE:
    case OR:
    case AND:
    case LIKE:
    case ESCAPE:
    case LEFT:
    case RIGHT:
    case NATURAL:
    case INNER:
    case OUTER:
    case FULL:
    case JOIN:
    case CROSS:
    case SET:
    case VALUES:
    case GROUP:
    case BY:
    case HAVING:
    case ORDER:
    case ASC:
    case DESC:
    case LIMIT:
    case OFFSET:
    case ON:
    case SQL_NOT:
    case AS:
    case DISTINCT:
    case IN:
    case BETWEEN:
    case IS:
    case ADD:
    case CHECK:
    case RETURNS:
    case SETOF:
    case LANGUAGE:
    case REPLACE:
    case INDEX:
    case USING:
    case EACH:
    case ROW:
    case STATEMENT:
    case EXECUTE:
    case PROCEDURE:
    case EXISTS:
    case TRIGGER:
    case BEFORE:
    case AFTER:
    case FOREIGN:
    case REFERENCES:
    case NULL:
    case IDENTIFIER:
    case NUMERIC:
    case DQSTRLIT:
    case SQSTRLIT:
      arguments = sqlFunctionArguments();
                        funcCall.setArguments(arguments);
      break;
    default:
      jj_la1[91] = jj_gen;
      ;
    }
    jj_consume_token(R_PARENTHESIS);
                funcCall.setName(t.image);

                {if (true) return funcCall;}
    throw new Error("Missing return statement in function");
  }

  final public Token sqlFuncNameElement() throws ParseException {
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    case FROM:
      t = jj_consume_token(FROM);
      break;
    case INTO:
      t = jj_consume_token(INTO);
      break;
    case WHERE:
      t = jj_consume_token(WHERE);
      break;
    case OR:
      t = jj_consume_token(OR);
      break;
    case AND:
      t = jj_consume_token(AND);
      break;
    case LIKE:
      t = jj_consume_token(LIKE);
      break;
    case ESCAPE:
      t = jj_consume_token(ESCAPE);
      break;
    case LEFT:
      t = jj_consume_token(LEFT);
      break;
    case RIGHT:
      t = jj_consume_token(RIGHT);
      break;
    case NATURAL:
      t = jj_consume_token(NATURAL);
      break;
    case INNER:
      t = jj_consume_token(INNER);
      break;
    case OUTER:
      t = jj_consume_token(OUTER);
      break;
    case FULL:
      t = jj_consume_token(FULL);
      break;
    case JOIN:
      t = jj_consume_token(JOIN);
      break;
    case CROSS:
      t = jj_consume_token(CROSS);
      break;
    case SET:
      t = jj_consume_token(SET);
      break;
    case VALUES:
      t = jj_consume_token(VALUES);
      break;
    case GROUP:
      t = jj_consume_token(GROUP);
      break;
    case BY:
      t = jj_consume_token(BY);
      break;
    case HAVING:
      t = jj_consume_token(HAVING);
      break;
    case ORDER:
      t = jj_consume_token(ORDER);
      break;
    case OFFSET:
      t = jj_consume_token(OFFSET);
      break;
    case ON:
      t = jj_consume_token(ON);
      break;
    case LIMIT:
      t = jj_consume_token(LIMIT);
      break;
    case ASC:
      t = jj_consume_token(ASC);
      break;
    case DESC:
      t = jj_consume_token(DESC);
      break;
    case SQL_NOT:
      t = jj_consume_token(SQL_NOT);
      break;
    case AS:
      t = jj_consume_token(AS);
      break;
    case DISTINCT:
      t = jj_consume_token(DISTINCT);
      break;
    case IN:
      t = jj_consume_token(IN);
      break;
    case BETWEEN:
      t = jj_consume_token(BETWEEN);
      break;
    case IS:
      t = jj_consume_token(IS);
      break;
    case ADD:
      t = jj_consume_token(ADD);
      break;
    case PROCEDURE:
      t = jj_consume_token(PROCEDURE);
      break;
    case EXECUTE:
      t = jj_consume_token(EXECUTE);
      break;
    case AFTER:
      t = jj_consume_token(AFTER);
      break;
    case BEFORE:
      t = jj_consume_token(BEFORE);
      break;
    case CHECK:
      t = jj_consume_token(CHECK);
      break;
    case RETURNS:
      t = jj_consume_token(RETURNS);
      break;
    case EACH:
      t = jj_consume_token(EACH);
      break;
    case SETOF:
      t = jj_consume_token(SETOF);
      break;
    case LANGUAGE:
      t = jj_consume_token(LANGUAGE);
      break;
    case REPLACE:
      t = jj_consume_token(REPLACE);
      break;
    case ROW:
      t = jj_consume_token(ROW);
      break;
    case STATEMENT:
      t = jj_consume_token(STATEMENT);
      break;
    case TRIGGER:
      t = jj_consume_token(TRIGGER);
      break;
    case EXISTS:
      t = jj_consume_token(EXISTS);
      break;
    case FOREIGN:
      t = jj_consume_token(FOREIGN);
      break;
    case REFERENCES:
      t = jj_consume_token(REFERENCES);
      break;
    case DELETE:
      t = jj_consume_token(DELETE);
      break;
    case SELECT:
      t = jj_consume_token(SELECT);
      break;
    case UPDATE:
      t = jj_consume_token(UPDATE);
      break;
    case INSERT:
      t = jj_consume_token(INSERT);
      break;
    case INDEX:
      t = jj_consume_token(INDEX);
      break;
    case USING:
      t = jj_consume_token(USING);
      break;
    default:
      jj_la1[92] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public SQLFunctionCallArguments sqlFunctionArguments() throws ParseException {
        SQLFunctionCallArguments args = new SQLFunctionCallArguments();
        ISQLStatement argument = null;
    argument = sqlStatement();
                args.addArgument(argument);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[93] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      argument = sqlStatement();
                        args.addArgument(argument);
    }
                {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

  final public Identifier identifier() throws ParseException {
        Identifier idf = new Identifier();
        Token t = null;
    t = jj_consume_token(IDENTIFIER);
                idf.setName(t.image);
                {if (true) return idf;}
    throw new Error("Missing return statement in function");
  }

  final public AdjustWhere adjustWhere() throws ParseException {
        AdjustWhere adWhere = new AdjustWhere();
        Token t = null;
    jj_consume_token(ADJUST_WHERE);
    jj_consume_token(EQUALS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
      break;
    default:
      jj_la1[94] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                adWhere.setValue(t.image);

                {if (true) return adWhere;}
    throw new Error("Missing return statement in function");
  }

  final public AdjustSet adjustSet() throws ParseException {
        AdjustSet adSet = new AdjustSet();
        Token t = null;
    jj_consume_token(ADJUST_SET);
    jj_consume_token(EQUALS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
      break;
    default:
      jj_la1[95] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                adSet.setValue(t.image);

                {if (true) return adSet;}
    throw new Error("Missing return statement in function");
  }

  final public UpdateSentence update() throws ParseException {
        UpdateSentence sentence = new UpdateSentence();
        TableIdentifier tbl = null;
        SetClause set = null;
        WhereClause where = null;
        AdjustWhere adjustWhere = null;
        AdjustSet adjustSet = null;

        Token t = null;
    t = jj_consume_token(UPDATE);
    tbl = table();
    set = set();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      where = where();
      break;
    default:
      jj_la1[96] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADJUST_SET:
      adjustSet = adjustSet();
      break;
    default:
      jj_la1[97] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADJUST_WHERE:
      adjustWhere = adjustWhere();
      break;
    default:
      jj_la1[98] = jj_gen;
      ;
    }
                sentence.setTable(tbl);
                sentence.setSet(set);
                sentence.setWhere(where);
                sentence.setAdjustWhere(adjustWhere);
                sentence.setAdjustSet(adjustSet);

                sentence.setLine(t.beginLine);
                sentence.setLinePosition(t.beginColumn);

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public SetClause set() throws ParseException {
        SetClause set = new SetClause();
        SetPair pair = null;
    jj_consume_token(SET);
    pair = setPair();
                             set.addSet(pair);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[99] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA);
      pair = setPair();
                                                                         set.addSet(pair);
    }
                {if (true) return set;}
    throw new Error("Missing return statement in function");
  }

  final public SetPair setPair() throws ParseException {
        SetPair pair = new SetPair();
        ColumnIdentifier col = null;
        ISQLStatement val = null;
    col = columnIdentifier();
    jj_consume_token(EQUALS);
    val = sqlStatement();
                pair.setColumn(col);
                pair.setValue(val);

                {if (true) return pair;}
    throw new Error("Missing return statement in function");
  }

  final public DeleteSentence delete() throws ParseException {
        DeleteSentence sentence = new DeleteSentence();
        FromClause from = null;
        WhereClause where = null;
        AdjustWhere adjustWhere = null;

        Token t = null;
    t = jj_consume_token(DELETE);
    from = from();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      where = where();
      break;
    default:
      jj_la1[100] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADJUST_WHERE:
      adjustWhere = adjustWhere();
      break;
    default:
      jj_la1[101] = jj_gen;
      ;
    }
                sentence.setFrom(from);
                sentence.setWhere(where);
                sentence.setAdjustWhere(adjustWhere);

                sentence.setLine(t.beginLine);
                sentence.setLinePosition(t.beginColumn);

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public InsertSentence insert() throws ParseException {
        InsertSentence sentence = new InsertSentence();
        TableIdentifier tbl = null;
        ColumnList cols = null;
        VariableList vals = null;

        Token t = null;
    t = jj_consume_token(INSERT);
    jj_consume_token(INTO);
    tbl = table();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case L_PARENTHESIS:
      cols = insertColumns();
      break;
    default:
      jj_la1[102] = jj_gen;
      ;
    }
    jj_consume_token(VALUES);
    vals = values();
                                       sentence.addValues(vals);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[103] = jj_gen;
        break label_14;
      }
      jj_consume_token(COMMA);
      vals = values();
                                                                                         sentence.addValues(vals);
    }
                sentence.setCols(cols);
                sentence.setTbl(tbl);

                sentence.setLine(t.beginLine);
                sentence.setLinePosition(t.beginColumn);

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public ColumnList insertColumns() throws ParseException {
        ColumnList colList;
        ColumnIdentifier col;
    jj_consume_token(L_PARENTHESIS);
    col = columnIdentifier();
                colList = new ColumnList();
                colList.addColumns(col);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[104] = jj_gen;
        break label_15;
      }
      jj_consume_token(COMMA);
      col = columnIdentifier();
                        colList.addColumns(col);
    }
    jj_consume_token(R_PARENTHESIS);
                {if (true) return colList;}
    throw new Error("Missing return statement in function");
  }

  final public VariableList values() throws ParseException {
        VariableList vals = new VariableList();
        ISQLStatement val = null;
    jj_consume_token(L_PARENTHESIS);
    val = variable();
                        vals.addValues(val);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[105] = jj_gen;
        break label_16;
      }
      jj_consume_token(COMMA);
      val = variable();
                                 vals.addValues(val);
    }
    jj_consume_token(R_PARENTHESIS);
                {if (true) return vals;}
    throw new Error("Missing return statement in function");
  }

///////////////////////////////////////////////////////////////////////////
  final public SubstituteSentence substituteSentence() throws ParseException {
        SubstituteSentence sentence = new SubstituteSentence();
        IVariableDescription operand = null;
        IStatement stmt = null;
    operand = scriptVariable();
    jj_consume_token(EQUALS);
    if (jj_2_34(2)) {
      stmt = statement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARALLEL:
        stmt = parallelBlock();
        break;
      default:
        jj_la1[106] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                sentence.setOperand((VariableDescriptor)operand);

                sentence.setStatement(stmt);

                sentence.setLine(operand.getLine());
                sentence.setLinePosition(operand.getLinePosition());

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public PlusPlusSentence plusPlusSentence() throws ParseException {
        PlusPlusSentence sentence = new PlusPlusSentence();
        IStatement stmt = null;
        PlusPlusStatement pstmt = null;
    stmt = plusplusStatement();
                sentence.setPlusplusStatement(stmt);

                pstmt = (PlusPlusStatement)stmt;

                sentence.setLine(pstmt.getLine());
                sentence.setLinePosition(pstmt.getLinePosition());

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public IStatement statement() throws ParseException {
        IStatement stmt = null;
    stmt = plusStatement();
                {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public IStatement plusStatement() throws ParseException {
        IStatement first = null;
        IStatement stmt = null;
        PlusStatement plusStatement = null;
        Token t = null;
    first = multipleStatement();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[107] = jj_gen;
        break label_17;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[108] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      stmt = multipleStatement();
                        if(plusStatement == null){
                                plusStatement = new PlusStatement();
                                plusStatement.setFirst(first);

                        }

                        SubStatement subStmt = new SubStatement();
                        subStmt.setOpe(t.image);
                        subStmt.setTarget(stmt);

                        plusStatement.addOperation(subStmt);
    }
                if(plusStatement != null){
                        {if (true) return plusStatement;}
                }

                {if (true) return first;}
    throw new Error("Missing return statement in function");
  }

  final public IStatement multipleStatement() throws ParseException {
        IStatement first = null;
        IStatement stmt = null;
        Token t = null;
        MultipleStatement mulStatement = null;
    first = moduloStatement();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASTERISK:
      case DIV:
        ;
        break;
      default:
        jj_la1[109] = jj_gen;
        break label_18;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASTERISK:
        t = jj_consume_token(ASTERISK);
        break;
      case DIV:
        t = jj_consume_token(DIV);
        break;
      default:
        jj_la1[110] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      stmt = moduloStatement();
                        if(mulStatement == null){
                                mulStatement = new MultipleStatement();
                                mulStatement.setFirst(first);
                        }

                        SubStatement subStmt = new SubStatement();
                        subStmt.setOpe(t.image);
                        subStmt.setTarget(stmt);

                        mulStatement.addOperation(subStmt);
    }
                if(mulStatement != null){
                        {if (true) return mulStatement;}
                }

                {if (true) return first;}
    throw new Error("Missing return statement in function");
  }

  final public IStatement moduloStatement() throws ParseException {
        IStatement first = null;
        IStatement stmt = null;
        ModuloStatement modStmt = null;
    first = parenthesisElement();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODULO:
        ;
        break;
      default:
        jj_la1[111] = jj_gen;
        break label_19;
      }
      jj_consume_token(MODULO);
      stmt = parenthesisElement();
                        if(modStmt == null){
                                modStmt = new ModuloStatement();
                                modStmt.setFirst(first);
                                modStmt.addOperation(stmt);

                        }else{
                                modStmt.addOperation(stmt);
                        }
    }
                if(modStmt != null){
                        {if (true) return modStmt;}
                }

                {if (true) return first;}
    throw new Error("Missing return statement in function");
  }

  final public IStatement parenthesisElement() throws ParseException {
        IStatement stmt = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case L_PARENTHESIS:
      jj_consume_token(L_PARENTHESIS);
      stmt = statement();
      jj_consume_token(R_PARENTHESIS);
                ParenthesisElemenet p = new ParenthesisElemenet();
                p.setStatement(stmt);

                {if (true) return p;}
      break;
    case PLUSPLUS:
    case MINUSMINUS:
    case DOLLAR:
    case AT_MARK:
    case SELECT:
    case INSERT:
    case UPDATE:
    case DELETE:
    case INTO:
    case FROM:
    case WHERE:
    case OR:
    case AND:
    case LIKE:
    case ESCAPE:
    case LEFT:
    case RIGHT:
    case NATURAL:
    case INNER:
    case OUTER:
    case FULL:
    case JOIN:
    case CROSS:
    case SET:
    case VALUES:
    case GROUP:
    case BY:
    case HAVING:
    case ORDER:
    case ASC:
    case DESC:
    case LIMIT:
    case OFFSET:
    case ON:
    case SQL_NOT:
    case AS:
    case DISTINCT:
    case IN:
    case BETWEEN:
    case IS:
    case ADD:
    case RENAME:
    case CHECK:
    case RETURNS:
    case SETOF:
    case LANGUAGE:
    case REPLACE:
    case INDEX:
    case USING:
    case EACH:
    case ROW:
    case STATEMENT:
    case EXECUTE:
    case PROCEDURE:
    case EXISTS:
    case TRIGGER:
    case BEFORE:
    case AFTER:
    case FOREIGN:
    case REFERENCES:
    case TRUE:
    case FALSE:
    case BOOL:
    case NULL:
    case PARALLEL:
    case IDENTIFIER:
    case NUMERIC:
    case DOUBLE:
    case DQSTRLIT:
    case SQSTRLIT:
      stmt = plusplusStatement();
                {if (true) return stmt;}
      break;
    default:
      jj_la1[112] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IStatement plusplusStatement() throws ParseException {
        PlusPlusStatement plusplus = null;
        IStatement stmt = null;
        Token t1 = null;
        Token t2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUSPLUS:
    case MINUSMINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUSPLUS:
        t1 = jj_consume_token(PLUSPLUS);
        break;
      case MINUSMINUS:
        t1 = jj_consume_token(MINUSMINUS);
        break;
      default:
        jj_la1[113] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      stmt = statementElement();
                plusplus = new PlusPlusStatement();
                plusplus.setStmt(stmt);

                plusplus.setPreOpe(t1.image);
                plusplus.setLine(t1.beginLine);
                plusplus.setLinePosition(t1.beginColumn);

                {if (true) return plusplus;}
      break;
    case DOLLAR:
    case AT_MARK:
    case SELECT:
    case INSERT:
    case UPDATE:
    case DELETE:
    case INTO:
    case FROM:
    case WHERE:
    case OR:
    case AND:
    case LIKE:
    case ESCAPE:
    case LEFT:
    case RIGHT:
    case NATURAL:
    case INNER:
    case OUTER:
    case FULL:
    case JOIN:
    case CROSS:
    case SET:
    case VALUES:
    case GROUP:
    case BY:
    case HAVING:
    case ORDER:
    case ASC:
    case DESC:
    case LIMIT:
    case OFFSET:
    case ON:
    case SQL_NOT:
    case AS:
    case DISTINCT:
    case IN:
    case BETWEEN:
    case IS:
    case ADD:
    case RENAME:
    case CHECK:
    case RETURNS:
    case SETOF:
    case LANGUAGE:
    case REPLACE:
    case INDEX:
    case USING:
    case EACH:
    case ROW:
    case STATEMENT:
    case EXECUTE:
    case PROCEDURE:
    case EXISTS:
    case TRIGGER:
    case BEFORE:
    case AFTER:
    case FOREIGN:
    case REFERENCES:
    case TRUE:
    case FALSE:
    case BOOL:
    case NULL:
    case PARALLEL:
    case IDENTIFIER:
    case NUMERIC:
    case DOUBLE:
    case DQSTRLIT:
    case SQSTRLIT:
      stmt = statementElement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUSPLUS:
      case MINUSMINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUSPLUS:
          t2 = jj_consume_token(PLUSPLUS);
          break;
        case MINUSMINUS:
          t2 = jj_consume_token(MINUSMINUS);
          break;
        default:
          jj_la1[114] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[115] = jj_gen;
        ;
      }
                if(t2 == null){
                        {if (true) return stmt;}
                }

                plusplus = new PlusPlusStatement();
                plusplus.setStmt(stmt);

                plusplus.setPostOpe(t2.image);
                plusplus.setLine(t2.beginLine);
                plusplus.setLinePosition(t2.beginColumn);

                {if (true) return plusplus;}
      break;
    default:
      jj_la1[116] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IStatement statementElement() throws ParseException {
        IStatement stmt = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
      stmt = constBoolean();
      break;
    case SELECT:
    case INSERT:
    case UPDATE:
    case DELETE:
    case INTO:
    case FROM:
    case WHERE:
    case OR:
    case AND:
    case LIKE:
    case ESCAPE:
    case LEFT:
    case RIGHT:
    case NATURAL:
    case INNER:
    case OUTER:
    case FULL:
    case JOIN:
    case CROSS:
    case SET:
    case VALUES:
    case GROUP:
    case BY:
    case HAVING:
    case ORDER:
    case ASC:
    case DESC:
    case LIMIT:
    case OFFSET:
    case ON:
    case SQL_NOT:
    case AS:
    case DISTINCT:
    case IN:
    case BETWEEN:
    case IS:
    case ADD:
    case RENAME:
    case CHECK:
    case RETURNS:
    case SETOF:
    case LANGUAGE:
    case REPLACE:
    case INDEX:
    case USING:
    case EACH:
    case ROW:
    case STATEMENT:
    case EXECUTE:
    case PROCEDURE:
    case EXISTS:
    case TRIGGER:
    case BEFORE:
    case AFTER:
    case FOREIGN:
    case REFERENCES:
    case PARALLEL:
    case IDENTIFIER:
      stmt = funcCall();
      break;
    case DOLLAR:
    case AT_MARK:
      stmt = scriptVariable();
      break;
    case NULL:
      stmt = nullConst();
      break;
    case DQSTRLIT:
    case SQSTRLIT:
      stmt = constStr();
      break;
    case NUMERIC:
      stmt = constNum();
      break;
    case DOUBLE:
      stmt = constDouble();
      break;
    case BOOL:
      stmt = booleanStatement();
      break;
    default:
      jj_la1[117] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public BooleanConst constBoolean() throws ParseException {
        BooleanConst blConst = new BooleanConst();
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
      break;
    default:
      jj_la1[118] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                blConst.setBoolStr(t.image);
                blConst.setLine(t.beginLine);
                blConst.setLinePosition(t.beginColumn);

                {if (true) return blConst;}
    throw new Error("Missing return statement in function");
  }

  final public DoubleConst constDouble() throws ParseException {
        DoubleConst dbl = new DoubleConst();
        Token t = null;
    t = jj_consume_token(DOUBLE);
                dbl.setNumber(t.image);
                dbl.setLine(t.beginLine);
                dbl.setLinePosition(t.beginColumn);

                {if (true) return dbl;}
    throw new Error("Missing return statement in function");
  }

  final public StringConst constStr() throws ParseException {
        Token t = null;
        StringConst cn = new StringConst();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DQSTRLIT:
      t = jj_consume_token(DQSTRLIT);
      break;
    case SQSTRLIT:
      t = jj_consume_token(SQSTRLIT);
      break;
    default:
      jj_la1[119] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                cn.setStr(t.image);
                cn.setLine(t.beginLine);
                cn.setLinePosition(t.beginColumn);

                {if (true) return cn;}
    throw new Error("Missing return statement in function");
  }

  final public NumericConst constNum() throws ParseException {
        NumericConst nc = new NumericConst();
        Token t = null;
    t = jj_consume_token(NUMERIC);
                nc.setNumber(t.image);
                nc.setLine(t.beginLine);
                nc.setLinePosition(t.beginColumn);

                {if (true) return nc;}
    throw new Error("Missing return statement in function");
  }

  final public NullConst nullConst() throws ParseException {
        NullConst stmt = new NullConst();
        Token t = null;
    t = jj_consume_token(NULL);
                stmt.setLine(t.beginLine);
                stmt.setLinePosition(t.beginColumn);

                {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public BooleanStatement booleanStatement() throws ParseException {
        BooleanStatement stmt = new BooleanStatement();
        IScriptCondition cond = null;
        Token t = null;
    t = jj_consume_token(BOOL);
    jj_consume_token(L_PARENTHESIS);
    cond = condition();
    jj_consume_token(R_PARENTHESIS);
                stmt.setCondition(cond);
                stmt.setLine(t.beginLine);
                stmt.setLinePosition(t.beginColumn);

                {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public FunctionCallSentence functionCallSentence() throws ParseException {
        FunctionCallSentence sentence = new FunctionCallSentence();
        FunctionCall functionCall = null;
    functionCall = funcCall();
                sentence.setLine(functionCall.getLine());
                sentence.setLinePosition(functionCall.getLinePosition());

                sentence.setFunctionCall(functionCall);

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public FunctionCall funcCall() throws ParseException {
        FunctionCall func = new FunctionCall();
        FuncArguments args = null;
        Token t1 = null;
        Token t2 = null;
    if (jj_2_35(2)) {
      t1 = funcSpaceElement();
      jj_consume_token(DOT);
    } else {
      ;
    }
    t2 = funcNameElement();
    jj_consume_token(L_PARENTHESIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUSPLUS:
    case MINUSMINUS:
    case L_PARENTHESIS:
    case DOLLAR:
    case AT_MARK:
    case SELECT:
    case INSERT:
    case UPDATE:
    case DELETE:
    case INTO:
    case FROM:
    case WHERE:
    case OR:
    case AND:
    case LIKE:
    case ESCAPE:
    case LEFT:
    case RIGHT:
    case NATURAL:
    case INNER:
    case OUTER:
    case FULL:
    case JOIN:
    case CROSS:
    case SET:
    case VALUES:
    case GROUP:
    case BY:
    case HAVING:
    case ORDER:
    case ASC:
    case DESC:
    case LIMIT:
    case OFFSET:
    case ON:
    case SQL_NOT:
    case AS:
    case DISTINCT:
    case IN:
    case BETWEEN:
    case IS:
    case ADD:
    case RENAME:
    case CHECK:
    case RETURNS:
    case SETOF:
    case LANGUAGE:
    case REPLACE:
    case INDEX:
    case USING:
    case EACH:
    case ROW:
    case STATEMENT:
    case EXECUTE:
    case PROCEDURE:
    case EXISTS:
    case TRIGGER:
    case BEFORE:
    case AFTER:
    case FOREIGN:
    case REFERENCES:
    case TRUE:
    case FALSE:
    case BOOL:
    case NULL:
    case PARALLEL:
    case IDENTIFIER:
    case NUMERIC:
    case DOUBLE:
    case DQSTRLIT:
    case SQSTRLIT:
      args = funcArguments();
      break;
    default:
      jj_la1[120] = jj_gen;
      ;
    }
    jj_consume_token(R_PARENTHESIS);
                func.setArgs(args);

                if(t1 != null){
                        func.setPackageName(t1.image);

                        func.setLine(t1.beginLine);
                        func.setLinePosition(t1.beginColumn);
                }else{
                        func.setLine(t2.beginLine);
                        func.setLinePosition(t2.beginColumn);
                }

                func.setFuncName(t2.image);

                {if (true) return func;}
    throw new Error("Missing return statement in function");
  }

  final public FuncArguments funcArguments() throws ParseException {
        FuncArguments args = new FuncArguments();
        IStatement stmt = null;
    stmt = statement();
                args.addArgument(stmt);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[121] = jj_gen;
        break label_20;
      }
      jj_consume_token(COMMA);
      stmt = statement();
                        args.addArgument(stmt);
    }
                {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

  final public VariableDescriptor scriptVariable() throws ParseException {
        VariableDescriptor val = null;

        IPathElement path = null;
        Token prefix = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR:
      prefix = jj_consume_token(DOLLAR);
      break;
    case AT_MARK:
      prefix = jj_consume_token(AT_MARK);
      break;
    default:
      jj_la1[122] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    path = domPath();
                val = new VariableDescriptor(prefix.image, path);

                val.setLine(prefix.beginLine);
                val.setLinePosition(prefix.beginColumn);

                {if (true) return val;}
    throw new Error("Missing return statement in function");
  }

  final public SynchronizeBlock synchronizedBlock() throws ParseException {
        Token t = null;
        IStatement stmt = null;
        SynchronizeBlock synchronizedBlock = new SynchronizeBlock();
    t = jj_consume_token(SYNCHRONIZED);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case L_PARENTHESIS:
      jj_consume_token(L_PARENTHESIS);
      stmt = statement();
      jj_consume_token(R_PARENTHESIS);
      break;
    default:
      jj_la1[123] = jj_gen;
      ;
    }
    jj_consume_token(L_BRACE);
    sentences(synchronizedBlock);
    jj_consume_token(R_BRACE);
                synchronizedBlock.setLine(t.beginLine);
                synchronizedBlock.setLinePosition(t.beginColumn);

                if(stmt != null){
                        synchronizedBlock.setLockTargetStatement(stmt);
                }

                {if (true) return synchronizedBlock;}
    throw new Error("Missing return statement in function");
  }

  final public IfBlock ifBlock() throws ParseException {
        Token t = null;
        IfBlock ifBlock = new IfBlock(this.filePath);
        IScriptCondition condition = null;
        ElseBlock elseIf = null;
    t = jj_consume_token(IF);
    jj_consume_token(L_PARENTHESIS);
    condition = condition();
    jj_consume_token(R_PARENTHESIS);
    jj_consume_token(L_BRACE);
    sentences(ifBlock);
    jj_consume_token(R_BRACE);
    label_21:
    while (true) {
      if (jj_2_36(2)) {
        ;
      } else {
        break label_21;
      }
      elseIf = elseIfBlock();
                        ifBlock.addElseBlock(elseIf);
                        elseIf = null;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      elseIf = elseBlock();
      break;
    default:
      jj_la1[124] = jj_gen;
      ;
    }
                if(elseIf != null){
                        ifBlock.addElseBlock(elseIf);
                }

                ifBlock.setCondition(condition);

                ifBlock.setLine(t.beginLine);
                ifBlock.setLinePosition(t.beginColumn);

                {if (true) return ifBlock;}
    throw new Error("Missing return statement in function");
  }

  final public ElseBlock elseIfBlock() throws ParseException {
        Token t = null;
        IScriptCondition condition = null;
        IfBlock ifBlock = new IfBlock(this.filePath);
        ElseBlock elseBlock = new ElseBlock(this.filePath);
    t = jj_consume_token(ELSE);
    jj_consume_token(IF);
    jj_consume_token(L_PARENTHESIS);
    condition = condition();
    jj_consume_token(R_PARENTHESIS);
    jj_consume_token(L_BRACE);
    sentences(ifBlock);
    jj_consume_token(R_BRACE);
                ifBlock.setCondition(condition);

                elseBlock.setIfBlock(ifBlock);

                ifBlock.setLine(t.beginLine);
                ifBlock.setLinePosition(t.beginColumn);
                elseBlock.setLine(t.beginLine);
                elseBlock.setLinePosition(t.beginColumn);

                {if (true) return elseBlock;}
    throw new Error("Missing return statement in function");
  }

  final public ElseBlock elseBlock() throws ParseException {
        Token t = null;
        ElseBlock elseBlock = new ElseBlock(this.filePath);
    t = jj_consume_token(ELSE);
    jj_consume_token(L_BRACE);
    sentences(elseBlock);
    jj_consume_token(R_BRACE);
                elseBlock.setLine(t.beginLine);
                elseBlock.setLinePosition(t.beginColumn);

                {if (true) return elseBlock;}
    throw new Error("Missing return statement in function");
  }

  final public WhileBlock whileBlock() throws ParseException {
        WhileBlock whileBlk = new WhileBlock(this.filePath);
        IScriptCondition condition = null;

        Token t = null;
    t = jj_consume_token(WHILE);
    jj_consume_token(L_PARENTHESIS);
    condition = condition();
    jj_consume_token(R_PARENTHESIS);
    jj_consume_token(L_BRACE);
    sentences(whileBlk);
    jj_consume_token(R_BRACE);
                whileBlk.setLine(t.beginLine);
                whileBlk.setLinePosition(t.beginColumn);

                whileBlk.setCondition(condition);

                {if (true) return whileBlk;}
    throw new Error("Missing return statement in function");
  }

  final public DoWhileBlock doWhileBlock() throws ParseException {
        DoWhileBlock doWhile = new DoWhileBlock(this.filePath);
        IScriptCondition condition = null;

        Token t = null;
    jj_consume_token(DO);
    jj_consume_token(R_PARENTHESIS);
    jj_consume_token(L_BRACE);
    sentences(doWhile);
    jj_consume_token(R_BRACE);
    t = jj_consume_token(WHILE);
    jj_consume_token(L_PARENTHESIS);
    condition = condition();
    jj_consume_token(R_PARENTHESIS);
                doWhile.setLine(t.beginLine);
                doWhile.setLinePosition(t.beginColumn);

                doWhile.setCondition(condition);

                {if (true) return doWhile;}
    throw new Error("Missing return statement in function");
  }

  final public ForBlock forBlock() throws ParseException {
        ForBlock forBlk = new ForBlock(this.filePath);

        IScriptSentence init = null;
        IScriptSentence afterLoop = null;
        IScriptCondition condition = null;
        Token t = null;
    t = jj_consume_token(FOR);
    jj_consume_token(L_PARENTHESIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUSPLUS:
    case MINUSMINUS:
    case DOLLAR:
    case AT_MARK:
    case SELECT:
    case INSERT:
    case UPDATE:
    case DELETE:
    case INTO:
    case FROM:
    case WHERE:
    case OR:
    case AND:
    case LIKE:
    case ESCAPE:
    case LEFT:
    case RIGHT:
    case NATURAL:
    case INNER:
    case OUTER:
    case FULL:
    case JOIN:
    case CROSS:
    case SET:
    case VALUES:
    case GROUP:
    case BY:
    case HAVING:
    case ORDER:
    case ASC:
    case DESC:
    case LIMIT:
    case OFFSET:
    case ON:
    case SQL_NOT:
    case AS:
    case DISTINCT:
    case IN:
    case BETWEEN:
    case IS:
    case BEGIN:
    case PREPARE:
    case COMMIT:
    case END:
    case ROLLBACK:
    case CREATE:
    case DROP:
    case ALTER:
    case ADD:
    case RENAME:
    case CHECK:
    case RETURNS:
    case SETOF:
    case LANGUAGE:
    case REPLACE:
    case INDEX:
    case USING:
    case EACH:
    case ROW:
    case STATEMENT:
    case EXECUTE:
    case PROCEDURE:
    case EXISTS:
    case TRIGGER:
    case BEFORE:
    case AFTER:
    case FOREIGN:
    case REFERENCES:
    case TRUE:
    case FALSE:
    case BOOL:
    case NULL:
    case RETURN:
    case USE:
    case BREAK:
    case CONTINUE:
    case DOWNLOAD:
    case REDIRECT:
    case THROW:
    case PARALLEL:
    case LOCAL:
    case IDENTIFIER:
    case NUMERIC:
    case DOUBLE:
    case DQSTRLIT:
    case SQSTRLIT:
      init = sentence();
      break;
    default:
      jj_la1[125] = jj_gen;
      ;
    }
    jj_consume_token(SEMI_COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUSPLUS:
    case MINUSMINUS:
    case L_PARENTHESIS:
    case DOLLAR:
    case AT_MARK:
    case NOT:
    case SELECT:
    case INSERT:
    case UPDATE:
    case DELETE:
    case INTO:
    case FROM:
    case WHERE:
    case OR:
    case AND:
    case LIKE:
    case ESCAPE:
    case LEFT:
    case RIGHT:
    case NATURAL:
    case INNER:
    case OUTER:
    case FULL:
    case JOIN:
    case CROSS:
    case SET:
    case VALUES:
    case GROUP:
    case BY:
    case HAVING:
    case ORDER:
    case ASC:
    case DESC:
    case LIMIT:
    case OFFSET:
    case ON:
    case SQL_NOT:
    case AS:
    case DISTINCT:
    case IN:
    case BETWEEN:
    case IS:
    case ADD:
    case RENAME:
    case CHECK:
    case RETURNS:
    case SETOF:
    case LANGUAGE:
    case REPLACE:
    case INDEX:
    case USING:
    case EACH:
    case ROW:
    case STATEMENT:
    case EXECUTE:
    case PROCEDURE:
    case EXISTS:
    case TRIGGER:
    case BEFORE:
    case AFTER:
    case FOREIGN:
    case REFERENCES:
    case TRUE:
    case FALSE:
    case BOOL:
    case NULL:
    case PARALLEL:
    case IDENTIFIER:
    case NUMERIC:
    case DOUBLE:
    case DQSTRLIT:
    case SQSTRLIT:
      condition = condition();
      break;
    default:
      jj_la1[126] = jj_gen;
      ;
    }
    jj_consume_token(SEMI_COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUSPLUS:
    case MINUSMINUS:
    case DOLLAR:
    case AT_MARK:
    case SELECT:
    case INSERT:
    case UPDATE:
    case DELETE:
    case INTO:
    case FROM:
    case WHERE:
    case OR:
    case AND:
    case LIKE:
    case ESCAPE:
    case LEFT:
    case RIGHT:
    case NATURAL:
    case INNER:
    case OUTER:
    case FULL:
    case JOIN:
    case CROSS:
    case SET:
    case VALUES:
    case GROUP:
    case BY:
    case HAVING:
    case ORDER:
    case ASC:
    case DESC:
    case LIMIT:
    case OFFSET:
    case ON:
    case SQL_NOT:
    case AS:
    case DISTINCT:
    case IN:
    case BETWEEN:
    case IS:
    case BEGIN:
    case PREPARE:
    case COMMIT:
    case END:
    case ROLLBACK:
    case CREATE:
    case DROP:
    case ALTER:
    case ADD:
    case RENAME:
    case CHECK:
    case RETURNS:
    case SETOF:
    case LANGUAGE:
    case REPLACE:
    case INDEX:
    case USING:
    case EACH:
    case ROW:
    case STATEMENT:
    case EXECUTE:
    case PROCEDURE:
    case EXISTS:
    case TRIGGER:
    case BEFORE:
    case AFTER:
    case FOREIGN:
    case REFERENCES:
    case TRUE:
    case FALSE:
    case BOOL:
    case NULL:
    case RETURN:
    case USE:
    case BREAK:
    case CONTINUE:
    case DOWNLOAD:
    case REDIRECT:
    case THROW:
    case PARALLEL:
    case LOCAL:
    case IDENTIFIER:
    case NUMERIC:
    case DOUBLE:
    case DQSTRLIT:
    case SQSTRLIT:
      afterLoop = sentence();
      break;
    default:
      jj_la1[127] = jj_gen;
      ;
    }
    jj_consume_token(R_PARENTHESIS);
    jj_consume_token(L_BRACE);
    sentences(forBlk);
    jj_consume_token(R_BRACE);
                forBlk.setLine(t.beginLine);
                forBlk.setLinePosition(t.beginColumn);

                forBlk.setInitSentence(init);
                forBlk.setCondition(condition);
                forBlk.setAfterLoop(afterLoop);

                {if (true) return forBlk;}
    throw new Error("Missing return statement in function");
  }

  final public BreakSentence breakSentence() throws ParseException {
        BreakSentence sentence = new BreakSentence();
        Token t = null;
    t = jj_consume_token(BREAK);
                sentence.setLine(t.beginLine);
                sentence.setLinePosition(t.beginColumn);

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public ContinueSentence continueSentence() throws ParseException {
        ContinueSentence sentence = new ContinueSentence();
        Token t = null;
    t = jj_consume_token(CONTINUE);
                sentence.setLine(t.beginLine);
                sentence.setLinePosition(t.beginColumn);

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition condition() throws ParseException {
        IScriptCondition condition = null;
    condition = orCond();
                {if (true) return condition;}
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition orCond() throws ParseException {
        IScriptCondition first = null;
        IScriptCondition cnd = null;
        OrCondition or = null;
    first = andCond();
    label_22:
    while (true) {
      if (jj_2_37(2)) {
        ;
      } else {
        break label_22;
      }
      jj_consume_token(LOGICAL_OR);
      cnd = andCond();
                        if(or == null){
                                or = new OrCondition();
                                or.addCondition(first);
                        }

                        or.addCondition(cnd);
    }
                if(or != null){
                        {if (true) return or;}
                }

                {if (true) return first;}
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition andCond() throws ParseException {
        IScriptCondition first = null;
        IScriptCondition cnd = null;
        AndCondition and = null;
    first = directCond();
    label_23:
    while (true) {
      if (jj_2_38(2)) {
        ;
      } else {
        break label_23;
      }
      jj_consume_token(LOGICAL_AND);
      cnd = directCond();
                        if(and == null){
                                and = new AndCondition();
                                and.addCondition(first);
                        }

                        and.addCondition(cnd);
    }
                if(and != null){
                        {if (true) return and;}
                }

                {if (true) return first;}
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition directCond() throws ParseException {
        Token ope = null;
        IScriptCondition left = null;
        IScriptCondition right = null;
        DirectCondition directCnd = null;
    left = notCondition();
    if (jj_2_39(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CMP_EQUALS:
        ope = jj_consume_token(CMP_EQUALS);
        break;
      case CMP_NOTEQUALS:
        ope = jj_consume_token(CMP_NOTEQUALS);
        break;
      case GT:
        ope = jj_consume_token(GT);
        break;
      case GEQ:
        ope = jj_consume_token(GEQ);
        break;
      case LT:
        ope = jj_consume_token(LT);
        break;
      case LEQ:
        ope = jj_consume_token(LEQ);
        break;
      default:
        jj_la1[128] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = notCondition();
    } else {
      ;
    }
                if(ope != null){
                        directCnd = new DirectCondition();

                        directCnd.setLeft(left);
                        directCnd.setOpe(ope.image);
                        directCnd.setRight(right);

                        directCnd.setLine(left.getLine());
                        directCnd.setLinePosition(left.getLinePosition());

                        {if (true) return directCnd;}
                }

                {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition notCondition() throws ParseException {
        IScriptCondition cnd = null;
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      t = jj_consume_token(NOT);
      cnd = orCond();
                NotCondition notCondition = new NotCondition();
                notCondition.setCondition(cnd);

                notCondition.setLine(t.beginLine);
                notCondition.setLinePosition(t.beginColumn);

                {if (true) return notCondition;}
      break;
    case PLUSPLUS:
    case MINUSMINUS:
    case L_PARENTHESIS:
    case DOLLAR:
    case AT_MARK:
    case SELECT:
    case INSERT:
    case UPDATE:
    case DELETE:
    case INTO:
    case FROM:
    case WHERE:
    case OR:
    case AND:
    case LIKE:
    case ESCAPE:
    case LEFT:
    case RIGHT:
    case NATURAL:
    case INNER:
    case OUTER:
    case FULL:
    case JOIN:
    case CROSS:
    case SET:
    case VALUES:
    case GROUP:
    case BY:
    case HAVING:
    case ORDER:
    case ASC:
    case DESC:
    case LIMIT:
    case OFFSET:
    case ON:
    case SQL_NOT:
    case AS:
    case DISTINCT:
    case IN:
    case BETWEEN:
    case IS:
    case ADD:
    case RENAME:
    case CHECK:
    case RETURNS:
    case SETOF:
    case LANGUAGE:
    case REPLACE:
    case INDEX:
    case USING:
    case EACH:
    case ROW:
    case STATEMENT:
    case EXECUTE:
    case PROCEDURE:
    case EXISTS:
    case TRIGGER:
    case BEFORE:
    case AFTER:
    case FOREIGN:
    case REFERENCES:
    case TRUE:
    case FALSE:
    case BOOL:
    case NULL:
    case PARALLEL:
    case IDENTIFIER:
    case NUMERIC:
    case DOUBLE:
    case DQSTRLIT:
    case SQSTRLIT:
      cnd = plusStmtCond();
                {if (true) return cnd;}
      break;
    default:
      jj_la1[129] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition plusStmtCond() throws ParseException {
        IScriptCondition first = null;
        IScriptCondition cnd = null;
        PlusStmtCondition scCond = null;
    first = minusStmtCond();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        ;
        break;
      default:
        jj_la1[130] = jj_gen;
        break label_24;
      }
      jj_consume_token(PLUS);
      cnd = minusStmtCond();
                        if(scCond == null){
                                scCond = new PlusStmtCondition();
                                scCond.addCondition(first);

                                scCond.setLine(first.getLine());
                                scCond.setLinePosition(first.getLinePosition());
                        }
                        scCond.addCondition(cnd);
    }
                if(scCond == null){
                        {if (true) return first;}
                }
                {if (true) return scCond;}
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition minusStmtCond() throws ParseException {
        IScriptCondition first = null;
        IScriptCondition cnd = null;
        MinusStmtCondition scCond = null;
    first = multipleStmtCond();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        ;
        break;
      default:
        jj_la1[131] = jj_gen;
        break label_25;
      }
      jj_consume_token(MINUS);
      cnd = multipleStmtCond();
                        if(scCond == null){
                                scCond = new MinusStmtCondition();
                                scCond.addCondition(first);

                                scCond.setLine(first.getLine());
                                scCond.setLinePosition(first.getLinePosition());
                        }
                        scCond.addCondition(cnd);
    }
                if(scCond == null){
                        {if (true) return first;}
                }
                {if (true) return scCond;}
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition multipleStmtCond() throws ParseException {
        IScriptCondition first = null;
        IScriptCondition cnd = null;
        MultipleStmtCondition scCond = null;
    first = divStmtCond();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASTERISK:
        ;
        break;
      default:
        jj_la1[132] = jj_gen;
        break label_26;
      }
      jj_consume_token(ASTERISK);
      cnd = divStmtCond();
                        if(scCond == null){
                                scCond = new MultipleStmtCondition();
                                scCond.addCondition(first);

                                scCond.setLine(first.getLine());
                                scCond.setLinePosition(first.getLinePosition());
                        }
                        scCond.addCondition(cnd);
    }
                if(scCond == null){
                        {if (true) return first;}
                }
                {if (true) return scCond;}
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition divStmtCond() throws ParseException {
        IScriptCondition first = null;
        IScriptCondition cnd = null;
        DivStmtCondition scCond = null;
    first = moduloStmtCond();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIV:
        ;
        break;
      default:
        jj_la1[133] = jj_gen;
        break label_27;
      }
      jj_consume_token(DIV);
      cnd = moduloStmtCond();
                        if(scCond == null){
                                scCond = new DivStmtCondition();
                                scCond.addCondition(first);

                                scCond.setLine(first.getLine());
                                scCond.setLinePosition(first.getLinePosition());
                        }
                        scCond.addCondition(cnd);
    }
                if(scCond == null){
                        {if (true) return first;}
                }
                {if (true) return scCond;}
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition moduloStmtCond() throws ParseException {
        IScriptCondition first = null;
        IScriptCondition cnd = null;
        ModuloStmtCondition scCond = null;
    first = parenthesisCond();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODULO:
        ;
        break;
      default:
        jj_la1[134] = jj_gen;
        break label_28;
      }
      jj_consume_token(MODULO);
      cnd = parenthesisCond();
                        if(scCond == null){
                                scCond = new ModuloStmtCondition();
                                scCond.addCondition(first);

                                scCond.setLine(first.getLine());
                                scCond.setLinePosition(first.getLinePosition());
                        }
                        scCond.addCondition(cnd);
    }
                if(scCond == null){
                        {if (true) return first;}
                }
                {if (true) return scCond;}
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition parenthesisCond() throws ParseException {
        IScriptCondition cnd = null;
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case L_PARENTHESIS:
      t = jj_consume_token(L_PARENTHESIS);
      cnd = orCond();
      jj_consume_token(R_PARENTHESIS);
                ParenthesisCondition pcnd = new ParenthesisCondition();
                pcnd.setCondition(cnd);

        pcnd.setLine(t.beginLine);
        pcnd.setLinePosition(t.beginColumn);

                {if (true) return pcnd;}
      break;
    case PLUSPLUS:
    case MINUSMINUS:
    case DOLLAR:
    case AT_MARK:
    case SELECT:
    case INSERT:
    case UPDATE:
    case DELETE:
    case INTO:
    case FROM:
    case WHERE:
    case OR:
    case AND:
    case LIKE:
    case ESCAPE:
    case LEFT:
    case RIGHT:
    case NATURAL:
    case INNER:
    case OUTER:
    case FULL:
    case JOIN:
    case CROSS:
    case SET:
    case VALUES:
    case GROUP:
    case BY:
    case HAVING:
    case ORDER:
    case ASC:
    case DESC:
    case LIMIT:
    case OFFSET:
    case ON:
    case SQL_NOT:
    case AS:
    case DISTINCT:
    case IN:
    case BETWEEN:
    case IS:
    case ADD:
    case RENAME:
    case CHECK:
    case RETURNS:
    case SETOF:
    case LANGUAGE:
    case REPLACE:
    case INDEX:
    case USING:
    case EACH:
    case ROW:
    case STATEMENT:
    case EXECUTE:
    case PROCEDURE:
    case EXISTS:
    case TRIGGER:
    case BEFORE:
    case AFTER:
    case FOREIGN:
    case REFERENCES:
    case TRUE:
    case FALSE:
    case BOOL:
    case NULL:
    case PARALLEL:
    case IDENTIFIER:
    case NUMERIC:
    case DOUBLE:
    case DQSTRLIT:
    case SQSTRLIT:
      cnd = variableStatementCondition();
                {if (true) return cnd;}
      break;
    default:
      jj_la1[135] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IScriptCondition variableStatementCondition() throws ParseException {
        IStatement stmt = null;
        VariableStmtCondition cond = new VariableStmtCondition();
    stmt = plusplusStatement();
                cond.setStmt(stmt);

                cond.setLine(stmt.getLine());
                cond.setLinePosition(stmt.getLinePosition());

                {if (true) return cond;}
    throw new Error("Missing return statement in function");
  }

  final public ReturnSentence returnSentence() throws ParseException {
        ReturnSentence ret = new ReturnSentence();
        IStatement stmt = null;
        Token t = null;
    t = jj_consume_token(RETURN);
    stmt = statement();
                ret.setLine(t.beginLine);
                ret.setLinePosition(t.beginColumn);

                ret.setReturnStatement(stmt);

                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public RedirectSentence redirectSentence() throws ParseException {
        RedirectSentence ret = new RedirectSentence();
        IStatement stmt = null;
        IStatement redirectCode = null;
        Token t = null;
    t = jj_consume_token(REDIRECT);
    stmt = statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      redirectCode = statement();
      break;
    default:
      jj_la1[136] = jj_gen;
      ;
    }
                ret.setLine(t.beginLine);
                ret.setLinePosition(t.beginColumn);

                ret.setRedirectUrl(stmt);

                if(redirectCode != null){
                        ret.setRedirectCode(redirectCode);
                }

                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public DownloadSentence downloadSentence() throws ParseException {
        DownloadSentence ret = new DownloadSentence();
        IStatement stmt = null;
        IStatement fileName = null;
        IStatement contentType = null;
        Token t = null;
    t = jj_consume_token(DOWNLOAD);
    stmt = statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      fileName = statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        contentType = statement();
        break;
      default:
        jj_la1[137] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[138] = jj_gen;
      ;
    }
                ret.setLine(t.beginLine);
                ret.setLinePosition(t.beginColumn);

                ret.setDownloadFile(stmt);

                if(fileName != null){
                        ret.setDownloadFileName(fileName);
                }

                if(contentType != null){
                        ret.setContentType(contentType);
                }

                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public LocalSentence localSentence() throws ParseException {
        LocalSentence localSentence = new LocalSentence();
        Token t = null;
        VariableDescriptor operand = null;
    t = jj_consume_token(LOCAL);
    operand = scriptVariable();
                localSentence.setLine(t.beginLine);
                localSentence.setLinePosition(t.beginColumn);

                localSentence.setOperand(operand);

                {if (true) return localSentence;}
    throw new Error("Missing return statement in function");
  }

  final public ThrowSentence throwSentence() throws ParseException {
        ThrowSentence sentence = new ThrowSentence();
        IStatement stmt = null;
        Token t = null;
    t = jj_consume_token(THROW);
    stmt = statement();
                sentence.setLine(t.beginLine);
                sentence.setLinePosition(t.beginColumn);

                sentence.setThrowStatement(stmt);

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public UseSentence useSentence() throws ParseException {
        UseSentence sentence = new UseSentence();
        Token use = null;
        Token idt = null;
    use = jj_consume_token(USE);
    idt = jj_consume_token(IDENTIFIER);
                sentence.setLine(use.beginLine);
                sentence.setLinePosition(use.beginColumn);

                sentence.setDataSource(idt.image);

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public CreateIndexSentence createIndexCentence(Token t1) throws ParseException {
        CreateIndexSentence sentence = new CreateIndexSentence();

        Token t = null;

        TableIdentifier table = null;
        ColumnIdentifier col= null;

        Token algoT = null;
    jj_consume_token(INDEX);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(ON);
    table = table();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case USING:
      jj_consume_token(USING);
      algoT = jj_consume_token(IDENTIFIER);
                        sentence.setUsingAlgo(new Identifier(algoT.image));
      break;
    default:
      jj_la1[139] = jj_gen;
      ;
    }
    jj_consume_token(L_PARENTHESIS);
    col = columnIdentifier();
                        sentence.addColumn(col);
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[140] = jj_gen;
        break label_29;
      }
      jj_consume_token(COMMA);
      col = columnIdentifier();
                                sentence.addColumn(col);
    }
    jj_consume_token(R_PARENTHESIS);
                sentence.setLine(t1.beginLine);
                sentence.setLinePosition(t1.beginColumn);

                sentence.setIndexName(new Identifier(t.image));
                sentence.setTable(table);


                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public DropIndexSentence dropIndexSentence(Token t1) throws ParseException {
        DropIndexSentence sentence = new DropIndexSentence();
        Token t = null;
    jj_consume_token(INDEX);
    t = jj_consume_token(IDENTIFIER);
                sentence.setLine(t1.beginLine);
                sentence.setLinePosition(t1.beginColumn);
                sentence.setIndexName(new Identifier(t.image));

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public CreateTableSentence createTableSentence(Token t1) throws ParseException {
        CreateTableSentence sentence = new CreateTableSentence();
        //Token t1 = null;
        TableIdentifier table = null;
        DdlColumnDescriptor desc = null;
        PrimaryKeys keys = null;
        Unique unique = null;
        CheckDefinition check = null;
        ForeignKey foreignKey = null;
    jj_consume_token(TABLE);
    table = table();
    jj_consume_token(L_PARENTHESIS);
    desc = ddlColumnDescriptor();
                sentence.addColumnDescriptor(desc);
    label_30:
    while (true) {
      if (jj_2_40(2)) {
        ;
      } else {
        break label_30;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        desc = ddlColumnDescriptor();
                                sentence.addColumnDescriptor(desc);
        break;
      case CHECK:
        check = check();
                                sentence.addCheck(check);
        break;
      default:
        jj_la1[141] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[142] = jj_gen;
        break label_31;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIMARY:
        keys = primaryKeys();
                                        sentence.setKeys(keys);
        break;
      case UNIQUE:
        unique = unique();
                                        sentence.addUnique(unique);
        break;
      case FOREIGN:
        foreignKey = foreignKey();
                                        sentence.addForeignKey(foreignKey);
        break;
      default:
        jj_la1[143] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(R_PARENTHESIS);
                sentence.setLine(t1.beginLine);
                sentence.setLinePosition(t1.beginColumn);
                sentence.setTable(table);

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public ForeignKey foreignKey() throws ParseException {
        ForeignKey foreignKey = new ForeignKey();
        ColumnList foreignKeys = null;
        ColumnList referencedKey = null;
        TableIdentifier table = null;
    jj_consume_token(FOREIGN);
    jj_consume_token(KEY);
    jj_consume_token(L_PARENTHESIS);
    foreignKeys = columnList();
    jj_consume_token(R_PARENTHESIS);
    jj_consume_token(REFERENCES);
    table = table();
    jj_consume_token(L_PARENTHESIS);
    referencedKey = columnList();
    jj_consume_token(R_PARENTHESIS);
                foreignKey.setRefTable(table);
                foreignKey.setForeignKeys(foreignKeys);
                foreignKey.setReferencedKey(referencedKey);

                {if (true) return foreignKey;}
    throw new Error("Missing return statement in function");
  }

  final public Unique unique() throws ParseException {
        Unique unique = new Unique();
        Token t1 = null;
    jj_consume_token(UNIQUE);
    jj_consume_token(L_PARENTHESIS);
    t1 = jj_consume_token(IDENTIFIER);
                unique.addKey(t1.image);
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[144] = jj_gen;
        break label_32;
      }
      jj_consume_token(COMMA);
      t1 = jj_consume_token(IDENTIFIER);
                        unique.addKey(t1.image);
    }
    jj_consume_token(R_PARENTHESIS);
                {if (true) return unique;}
    throw new Error("Missing return statement in function");
  }

  final public PrimaryKeys primaryKeys() throws ParseException {
        PrimaryKeys primaryKeys = new PrimaryKeys();
        Token t1 = null;
    jj_consume_token(PRIMARY);
    jj_consume_token(KEY);
    jj_consume_token(L_PARENTHESIS);
    t1 = jj_consume_token(IDENTIFIER);
                primaryKeys.addKey(t1.image);
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[145] = jj_gen;
        break label_33;
      }
      jj_consume_token(COMMA);
      t1 = jj_consume_token(IDENTIFIER);
                        primaryKeys.addKey(t1.image);
    }
    jj_consume_token(R_PARENTHESIS);
                {if (true) return primaryKeys;}
    throw new Error("Missing return statement in function");
  }

  final public DdlColumnDescriptor ddlColumnDescriptor() throws ParseException {
        DdlColumnDescriptor desc = new DdlColumnDescriptor();
        ColumnTypeDescriptor typeDesc = null;
        Token t1 = null;
        Token tuni = null;
        Token notnull = null;
        ISQLStatement defaultVal = null;
        CheckDefinition check = null;
    t1 = jj_consume_token(IDENTIFIER);
    typeDesc = columnTypeDescriptor();
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SQL_NOT:
      case SQL_DEFAULT:
      case UNIQUE:
        ;
        break;
      default:
        jj_la1[146] = jj_gen;
        break label_34;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SQL_NOT:
        notnull = jj_consume_token(SQL_NOT);
        jj_consume_token(NULL);
        break;
      case UNIQUE:
        tuni = jj_consume_token(UNIQUE);
        break;
      case SQL_DEFAULT:
        jj_consume_token(SQL_DEFAULT);
        defaultVal = variable();
        break;
      default:
        jj_la1[147] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHECK:
      check = check();
      break;
    default:
      jj_la1[148] = jj_gen;
      ;
    }
                desc.setTypeDescriptor(typeDesc);
                if(defaultVal != null){
                        desc.setDefaultValue(defaultVal);
                }
                if(notnull != null){
                        desc.setNotnull(true);
                }
                if(tuni != null){
                        desc.setUnique(true);
                }
                if(check != null){
                        desc.setCheck(check);
                }

                desc.setName(t1.image);
                desc.setLine(t1.beginLine);
                desc.setLinePosition(t1.beginColumn);

                {if (true) return desc;}
    throw new Error("Missing return statement in function");
  }

  final public CheckDefinition check() throws ParseException {
        CheckDefinition check = new CheckDefinition();
        ISQLExpression exp = null;
    jj_consume_token(CHECK);
    jj_consume_token(L_PARENTHESIS);
    exp = orExp();
                check.setExp(exp);
    jj_consume_token(R_PARENTHESIS);
                {if (true) return check;}
    throw new Error("Missing return statement in function");
  }

  final public ColumnTypeDescriptor columnTypeDescriptor() throws ParseException {
        ColumnTypeDescriptor typeDesc = new ColumnTypeDescriptor();
        ISQLStatement val = null;
        Token t1 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t1 = jj_consume_token(IDENTIFIER);
      break;
    case TRIGGER:
      t1 = jj_consume_token(TRIGGER);
      break;
    default:
      jj_la1[149] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case L_PARENTHESIS:
      jj_consume_token(L_PARENTHESIS);
      val = variable();
      jj_consume_token(R_PARENTHESIS);
      break;
    default:
      jj_la1[150] = jj_gen;
      ;
    }
                if(val != null){
                        typeDesc.setLength(val);
                }
                typeDesc.setTypeName(t1.image);

                {if (true) return typeDesc;}
    throw new Error("Missing return statement in function");
  }

  final public DropTableSentence dropTableSentence(Token t1) throws ParseException {
        DropTableSentence sentence = new DropTableSentence();
        //Token t1 = null;
        TableIdentifier table = null;
    jj_consume_token(TABLE);
    table = table();
                sentence.setLine(t1.beginLine);
                sentence.setLinePosition(t1.beginColumn);
                sentence.setTable(table);

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public CreateFunctionSentence createFunctionSentence(Token t1) throws ParseException {
        CreateFunctionSentence sentence = new CreateFunctionSentence();
        Token tn = null;
        Token rt = null;
        ColumnTypeDescriptor typeDesc = null;
        Token st = null;
        Token lang = null;
        Token prog = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      rt = jj_consume_token(OR);
      jj_consume_token(REPLACE);
      break;
    default:
      jj_la1[151] = jj_gen;
      ;
    }
    jj_consume_token(FUNCTION);
    tn = jj_consume_token(IDENTIFIER);
                if(rt != null){
                        sentence.setRelpace(true);
                }
    jj_consume_token(L_PARENTHESIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRIGGER:
    case IDENTIFIER:
      typeDesc = columnTypeDescriptor();
                        sentence.addTypeDesc(typeDesc);
      label_35:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[152] = jj_gen;
          break label_35;
        }
        jj_consume_token(COMMA);
        typeDesc = columnTypeDescriptor();
                                sentence.addTypeDesc(typeDesc);
      }
      break;
    default:
      jj_la1[153] = jj_gen;
      ;
    }
    jj_consume_token(R_PARENTHESIS);
    jj_consume_token(RETURNS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SETOF:
      st = jj_consume_token(SETOF);
      break;
    default:
      jj_la1[154] = jj_gen;
      ;
    }
    typeDesc = columnTypeDescriptor();
                if(st != null){
                        sentence.setSetof(true);
                }

                sentence.setRetType(typeDesc);
    jj_consume_token(AS);
    prog = jj_consume_token(SQSTRLIT);
    jj_consume_token(LANGUAGE);
    lang = jj_consume_token(SQSTRLIT);
                sentence.setLine(t1.beginLine);
                sentence.setLinePosition(t1.beginColumn);

                sentence.setFuncName(tn.image);
                sentence.setProgram(prog.image);
                sentence.setLanguage(lang.image);

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public CreateTriggerSentence createTriggerSentence(Token t1) throws ParseException {
        CreateTriggerSentence sentence = new CreateTriggerSentence();
        Token tn = null;
        Token ba = null;
        Token table = null;
        UpdateType uType = null;
        Token updateTarget = null;
        Token funcName = null;
        SQLFunctionCallArguments arguments = null;
    jj_consume_token(TRIGGER);
    tn = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEFORE:
    case AFTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEFORE:
        ba = jj_consume_token(BEFORE);
        break;
      case AFTER:
        ba = jj_consume_token(AFTER);
        break;
      default:
        jj_la1[155] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[156] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSERT:
    case UPDATE:
    case DELETE:
      uType = updateType();
                        sentence.addUpdateType(uType);
      label_36:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[157] = jj_gen;
          break label_36;
        }
        jj_consume_token(OR);
        uType = updateType();
                                sentence.addUpdateType(uType);
      }
      break;
    default:
      jj_la1[158] = jj_gen;
      ;
    }
    jj_consume_token(ON);
    table = jj_consume_token(IDENTIFIER);
    jj_consume_token(FOR);
    jj_consume_token(EACH);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ROW:
    case STATEMENT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ROW:
        updateTarget = jj_consume_token(ROW);
        break;
      case STATEMENT:
        updateTarget = jj_consume_token(STATEMENT);
        break;
      default:
        jj_la1[159] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[160] = jj_gen;
      ;
    }
    jj_consume_token(EXECUTE);
    jj_consume_token(PROCEDURE);
    funcName = jj_consume_token(IDENTIFIER);
    jj_consume_token(L_PARENTHESIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASTERISK:
    case L_PARENTHESIS:
    case DOLLAR:
    case AT_MARK:
    case SELECT:
    case INSERT:
    case UPDATE:
    case DELETE:
    case INTO:
    case FROM:
    case WHERE:
    case OR:
    case AND:
    case LIKE:
    case ESCAPE:
    case LEFT:
    case RIGHT:
    case NATURAL:
    case INNER:
    case OUTER:
    case FULL:
    case JOIN:
    case CROSS:
    case SET:
    case VALUES:
    case GROUP:
    case BY:
    case HAVING:
    case ORDER:
    case ASC:
    case DESC:
    case LIMIT:
    case OFFSET:
    case ON:
    case SQL_NOT:
    case AS:
    case DISTINCT:
    case IN:
    case BETWEEN:
    case IS:
    case ADD:
    case CHECK:
    case RETURNS:
    case SETOF:
    case LANGUAGE:
    case REPLACE:
    case INDEX:
    case USING:
    case EACH:
    case ROW:
    case STATEMENT:
    case EXECUTE:
    case PROCEDURE:
    case EXISTS:
    case TRIGGER:
    case BEFORE:
    case AFTER:
    case FOREIGN:
    case REFERENCES:
    case NULL:
    case IDENTIFIER:
    case NUMERIC:
    case DQSTRLIT:
    case SQSTRLIT:
      arguments = sqlFunctionArguments();
                        sentence.setFuncArguments(arguments);
      break;
    default:
      jj_la1[161] = jj_gen;
      ;
    }
    jj_consume_token(R_PARENTHESIS);
                sentence.setLine(t1.beginLine);
                sentence.setLinePosition(t1.beginColumn);

                sentence.setTriggerName(tn.image);
                sentence.setTiming(ba.image);
                sentence.setTriggerTable(table.image);

                sentence.setUpdateTarget(updateTarget.image);
                sentence.setFuncName(funcName.image);

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public UpdateType updateType() throws ParseException {
        UpdateType uType = new UpdateType();
        Token t1 = null;
        Token columnT = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSERT:
      t1 = jj_consume_token(INSERT);
      break;
    case UPDATE:
      t1 = jj_consume_token(UPDATE);
      break;
    case DELETE:
      t1 = jj_consume_token(DELETE);
      break;
    default:
      jj_la1[162] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OF:
      jj_consume_token(OF);
      columnT = jj_consume_token(IDENTIFIER);
                        uType.addColList(columnT.image);
      label_37:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[163] = jj_gen;
          break label_37;
        }
        jj_consume_token(COMMA);
        columnT = jj_consume_token(IDENTIFIER);
                                uType.addColList(columnT.image);
      }
      break;
    default:
      jj_la1[164] = jj_gen;
      ;
    }
                uType.setTypeName(t1.image);
                {if (true) return uType;}
    throw new Error("Missing return statement in function");
  }

  final public DropFunctionSentence dropFunctionSentence(Token t1) throws ParseException {
        DropFunctionSentence sentence = new DropFunctionSentence();
        Token tn = null;
        ColumnTypeDescriptor typeDesc = null;
    jj_consume_token(FUNCTION);
    tn = jj_consume_token(IDENTIFIER);
    jj_consume_token(L_PARENTHESIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRIGGER:
    case IDENTIFIER:
      typeDesc = columnTypeDescriptor();
                        sentence.addTypeDesc(typeDesc);
      label_38:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[165] = jj_gen;
          break label_38;
        }
        jj_consume_token(COMMA);
        typeDesc = columnTypeDescriptor();
                                sentence.addTypeDesc(typeDesc);
      }
      break;
    default:
      jj_la1[166] = jj_gen;
      ;
    }
    jj_consume_token(R_PARENTHESIS);
                sentence.setLine(t1.beginLine);
                sentence.setLinePosition(t1.beginColumn);

                sentence.setFuncName(tn.image);

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public DropTriggerSentence dropTriggerSentence(Token t1) throws ParseException {
        DropTriggerSentence sentence = new DropTriggerSentence();
        Token ifexists = null;
        Token name = null;
        Token table = null;
        Token opt = null;
    jj_consume_token(TRIGGER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      ifexists = jj_consume_token(IF);
      jj_consume_token(EXISTS);
      break;
    default:
      jj_la1[167] = jj_gen;
      ;
    }
    name = jj_consume_token(IDENTIFIER);
    jj_consume_token(ON);
    table = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      opt = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[168] = jj_gen;
      ;
    }
                sentence.setLine(t1.beginLine);
                sentence.setLinePosition(t1.beginColumn);

                if(ifexists != null){
                        sentence.setExixts(true);
                }

                sentence.setTriggerName(name.image);
                sentence.setTable(table.image);

                if(opt != null){
                        sentence.setOpt(opt.image);
                }

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public AlterTableSentence alterTableSentence() throws ParseException {
        AlterTableSentence sentence = new AlterTableSentence();
        Token t1 = null;
        TableIdentifier table = null;
        IAlterAction action;
    t1 = jj_consume_token(ALTER);
    jj_consume_token(TABLE);
    table = table();
    action = alterAction();
                sentence.setLine(t1.beginLine);
                sentence.setLinePosition(t1.beginColumn);
                sentence.setTable(table);

                sentence.setAction(action);

                {if (true) return sentence;}
    throw new Error("Missing return statement in function");
  }

  final public IAlterAction alterAction() throws ParseException {
        IAlterAction action = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
      action = alterAddAction();
      break;
    case DROP:
      action = alterDropAction();
      break;
    case RENAME:
      action = alterRenameAction();
      break;
    default:
      jj_la1[169] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return action;}
    throw new Error("Missing return statement in function");
  }

  final public IAlterAction alterAddAction() throws ParseException {
        AlterAdd acion = new AlterAdd();
        DdlColumnDescriptor columnDesc = null;
    jj_consume_token(ADD);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLUMN:
      jj_consume_token(COLUMN);
      break;
    default:
      jj_la1[170] = jj_gen;
      ;
    }
    columnDesc = ddlColumnDescriptor();
                acion.setColumnDesc(columnDesc);

                {if (true) return acion;}
    throw new Error("Missing return statement in function");
  }

  final public IAlterAction alterDropAction() throws ParseException {
        AlterDrop acion = new AlterDrop();
        Token t1 = null;
    jj_consume_token(DROP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLUMN:
      jj_consume_token(COLUMN);
      break;
    default:
      jj_la1[171] = jj_gen;
      ;
    }
    t1 = jj_consume_token(IDENTIFIER);
                acion.setColumnDesc(t1.image);

                {if (true) return acion;}
    throw new Error("Missing return statement in function");
  }

  final public IAlterAction alterRenameAction() throws ParseException {
        AlterRename acion = new AlterRename();
        Token t1 = null;
        Token t2 = null;
    jj_consume_token(RENAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t1 = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[172] = jj_gen;
      ;
    }
    jj_consume_token(TO);
    t2 = jj_consume_token(IDENTIFIER);
                if(t1 != null){
                        acion.setBeforeName(t1.image);
                }

                acion.setNewName(t2.image);

                {if (true) return acion;}
    throw new Error("Missing return statement in function");
  }

///  PATH ELEMENT /////////////////////////////////////////////////////////
  final public IPathElement domPath() throws ParseException {
        DomPathElement first = null;
        DomPathElement domProp = null;
        IStatement numeric = null;

        PathElement path = null;
        IPathElement current = null;
    first = domPathElement();
                path = new PathElement(first.getImage());
                current = path;
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case L_BRACKET:
      case DOT:
        ;
        break;
      default:
        jj_la1[173] = jj_gen;
        break label_39;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        domProp = domPathElement();
                        PathElement next = new PathElement(domProp.getImage());
                        current.setChild(next);
                        next.setParent(current);

                        current = next;
        break;
      case L_BRACKET:
        jj_consume_token(L_BRACKET);
        numeric = statement();
        jj_consume_token(R_BRACKET);
                        ArrayPathElement nextAr = new ArrayPathElement(numeric);

                        current.setChild(nextAr);
                        nextAr.setParent(current);

                        current = nextAr;
        break;
      default:
        jj_la1[174] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return path;}
    throw new Error("Missing return statement in function");
  }

  final public DomPathElement domPathElement() throws ParseException {
        Token t = null;
        DomPathElement el = new DomPathElement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    case FROM:
      t = jj_consume_token(FROM);
      break;
    case SELECT:
      t = jj_consume_token(SELECT);
      break;
    case INSERT:
      t = jj_consume_token(INSERT);
      break;
    case UPDATE:
      t = jj_consume_token(UPDATE);
      break;
    case DELETE:
      t = jj_consume_token(DELETE);
      break;
    case INTO:
      t = jj_consume_token(INTO);
      break;
    case WHERE:
      t = jj_consume_token(WHERE);
      break;
    case OR:
      t = jj_consume_token(OR);
      break;
    case AND:
      t = jj_consume_token(AND);
      break;
    case LIKE:
      t = jj_consume_token(LIKE);
      break;
    case ESCAPE:
      t = jj_consume_token(ESCAPE);
      break;
    case LEFT:
      t = jj_consume_token(LEFT);
      break;
    case RIGHT:
      t = jj_consume_token(RIGHT);
      break;
    case NATURAL:
      t = jj_consume_token(NATURAL);
      break;
    case INNER:
      t = jj_consume_token(INNER);
      break;
    case OUTER:
      t = jj_consume_token(OUTER);
      break;
    case FULL:
      t = jj_consume_token(FULL);
      break;
    case JOIN:
      t = jj_consume_token(JOIN);
      break;
    case CROSS:
      t = jj_consume_token(CROSS);
      break;
    case SET:
      t = jj_consume_token(SET);
      break;
    case VALUES:
      t = jj_consume_token(VALUES);
      break;
    case IF:
      t = jj_consume_token(IF);
      break;
    case ELSE:
      t = jj_consume_token(ELSE);
      break;
    case GROUP:
      t = jj_consume_token(GROUP);
      break;
    case BY:
      t = jj_consume_token(BY);
      break;
    case HAVING:
      t = jj_consume_token(HAVING);
      break;
    case ORDER:
      t = jj_consume_token(ORDER);
      break;
    case OFFSET:
      t = jj_consume_token(OFFSET);
      break;
    case ON:
      t = jj_consume_token(ON);
      break;
    case LIMIT:
      t = jj_consume_token(LIMIT);
      break;
    case ASC:
      t = jj_consume_token(ASC);
      break;
    case DESC:
      t = jj_consume_token(DESC);
      break;
    case SQL_NOT:
      t = jj_consume_token(SQL_NOT);
      break;
    case AS:
      t = jj_consume_token(AS);
      break;
    case DISTINCT:
      t = jj_consume_token(DISTINCT);
      break;
    case IN:
      t = jj_consume_token(IN);
      break;
    case BETWEEN:
      t = jj_consume_token(BETWEEN);
      break;
    case IS:
      t = jj_consume_token(IS);
      break;
    case BEGIN:
      t = jj_consume_token(BEGIN);
      break;
    case COMMIT:
      t = jj_consume_token(COMMIT);
      break;
    case END:
      t = jj_consume_token(END);
      break;
    case ROLLBACK:
      t = jj_consume_token(ROLLBACK);
      break;
    case CREATE:
      t = jj_consume_token(CREATE);
      break;
    case DROP:
      t = jj_consume_token(DROP);
      break;
    case LEVEL:
      t = jj_consume_token(LEVEL);
      break;
    case PREPARE:
      t = jj_consume_token(PREPARE);
      break;
    case TRANSACTION:
      t = jj_consume_token(TRANSACTION);
      break;
    case ISOLATION:
      t = jj_consume_token(ISOLATION);
      break;
    case PREPARED:
      t = jj_consume_token(PREPARED);
      break;
    case ALTER:
      t = jj_consume_token(ALTER);
      break;
    case ADD:
      t = jj_consume_token(ADD);
      break;
    case RENAME:
      t = jj_consume_token(RENAME);
      break;
    case COLUMN:
      t = jj_consume_token(COLUMN);
      break;
    case TO:
      t = jj_consume_token(TO);
      break;
    case PRIMARY:
      t = jj_consume_token(PRIMARY);
      break;
    case KEY:
      t = jj_consume_token(KEY);
      break;
    case PROCEDURE:
      t = jj_consume_token(PROCEDURE);
      break;
    case EXECUTE:
      t = jj_consume_token(EXECUTE);
      break;
    case AFTER:
      t = jj_consume_token(AFTER);
      break;
    case BEFORE:
      t = jj_consume_token(BEFORE);
      break;
    case CHECK:
      t = jj_consume_token(CHECK);
      break;
    case RETURNS:
      t = jj_consume_token(RETURNS);
      break;
    case EACH:
      t = jj_consume_token(EACH);
      break;
    case SETOF:
      t = jj_consume_token(SETOF);
      break;
    case LANGUAGE:
      t = jj_consume_token(LANGUAGE);
      break;
    case REPLACE:
      t = jj_consume_token(REPLACE);
      break;
    case ROW:
      t = jj_consume_token(ROW);
      break;
    case STATEMENT:
      t = jj_consume_token(STATEMENT);
      break;
    case TRIGGER:
      t = jj_consume_token(TRIGGER);
      break;
    case EXISTS:
      t = jj_consume_token(EXISTS);
      break;
    case FOREIGN:
      t = jj_consume_token(FOREIGN);
      break;
    case REFERENCES:
      t = jj_consume_token(REFERENCES);
      break;
    case INDEX:
      t = jj_consume_token(INDEX);
      break;
    case USING:
      t = jj_consume_token(USING);
      break;
    case PARALLEL:
      t = jj_consume_token(PARALLEL);
      break;
    case LOCAL:
      t = jj_consume_token(LOCAL);
      break;
    default:
      jj_la1[175] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                el.addString(t.image);
    if (jj_2_41(2)) {
      t = jj_consume_token(MINUS);
                        el.addString(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
        break;
      case FROM:
        t = jj_consume_token(FROM);
        break;
      case SELECT:
        t = jj_consume_token(SELECT);
        break;
      case INSERT:
        t = jj_consume_token(INSERT);
        break;
      case UPDATE:
        t = jj_consume_token(UPDATE);
        break;
      case DELETE:
        t = jj_consume_token(DELETE);
        break;
      case INTO:
        t = jj_consume_token(INTO);
        break;
      case WHERE:
        t = jj_consume_token(WHERE);
        break;
      case OR:
        t = jj_consume_token(OR);
        break;
      case AND:
        t = jj_consume_token(AND);
        break;
      case LIKE:
        t = jj_consume_token(LIKE);
        break;
      case ESCAPE:
        t = jj_consume_token(ESCAPE);
        break;
      case LEFT:
        t = jj_consume_token(LEFT);
        break;
      case RIGHT:
        t = jj_consume_token(RIGHT);
        break;
      case NATURAL:
        t = jj_consume_token(NATURAL);
        break;
      case INNER:
        t = jj_consume_token(INNER);
        break;
      case OUTER:
        t = jj_consume_token(OUTER);
        break;
      case FULL:
        t = jj_consume_token(FULL);
        break;
      case JOIN:
        t = jj_consume_token(JOIN);
        break;
      case CROSS:
        t = jj_consume_token(CROSS);
        break;
      case SET:
        t = jj_consume_token(SET);
        break;
      case VALUES:
        t = jj_consume_token(VALUES);
        break;
      case IF:
        t = jj_consume_token(IF);
        break;
      case ELSE:
        t = jj_consume_token(ELSE);
        break;
      case GROUP:
        t = jj_consume_token(GROUP);
        break;
      case BY:
        t = jj_consume_token(BY);
        break;
      case HAVING:
        t = jj_consume_token(HAVING);
        break;
      case ORDER:
        t = jj_consume_token(ORDER);
        break;
      case OFFSET:
        t = jj_consume_token(OFFSET);
        break;
      case ON:
        t = jj_consume_token(ON);
        break;
      case LIMIT:
        t = jj_consume_token(LIMIT);
        break;
      case ASC:
        t = jj_consume_token(ASC);
        break;
      case DESC:
        t = jj_consume_token(DESC);
        break;
      case SQL_NOT:
        t = jj_consume_token(SQL_NOT);
        break;
      case AS:
        t = jj_consume_token(AS);
        break;
      case DISTINCT:
        t = jj_consume_token(DISTINCT);
        break;
      case IN:
        t = jj_consume_token(IN);
        break;
      case BETWEEN:
        t = jj_consume_token(BETWEEN);
        break;
      case IS:
        t = jj_consume_token(IS);
        break;
      case BEGIN:
        t = jj_consume_token(BEGIN);
        break;
      case COMMIT:
        t = jj_consume_token(COMMIT);
        break;
      case END:
        t = jj_consume_token(END);
        break;
      case ROLLBACK:
        t = jj_consume_token(ROLLBACK);
        break;
      case CREATE:
        t = jj_consume_token(CREATE);
        break;
      case DROP:
        t = jj_consume_token(DROP);
        break;
      case LEVEL:
        t = jj_consume_token(LEVEL);
        break;
      case PREPARE:
        t = jj_consume_token(PREPARE);
        break;
      case TRANSACTION:
        t = jj_consume_token(TRANSACTION);
        break;
      case ISOLATION:
        t = jj_consume_token(ISOLATION);
        break;
      case PREPARED:
        t = jj_consume_token(PREPARED);
        break;
      case ALTER:
        t = jj_consume_token(ALTER);
        break;
      case ADD:
        t = jj_consume_token(ADD);
        break;
      case RENAME:
        t = jj_consume_token(RENAME);
        break;
      case COLUMN:
        t = jj_consume_token(COLUMN);
        break;
      case TO:
        t = jj_consume_token(TO);
        break;
      case PRIMARY:
        t = jj_consume_token(PRIMARY);
        break;
      case KEY:
        t = jj_consume_token(KEY);
        break;
      case PROCEDURE:
        t = jj_consume_token(PROCEDURE);
        break;
      case EXECUTE:
        t = jj_consume_token(EXECUTE);
        break;
      case AFTER:
        t = jj_consume_token(AFTER);
        break;
      case BEFORE:
        t = jj_consume_token(BEFORE);
        break;
      case CHECK:
        t = jj_consume_token(CHECK);
        break;
      case RETURNS:
        t = jj_consume_token(RETURNS);
        break;
      case EACH:
        t = jj_consume_token(EACH);
        break;
      case SETOF:
        t = jj_consume_token(SETOF);
        break;
      case LANGUAGE:
        t = jj_consume_token(LANGUAGE);
        break;
      case REPLACE:
        t = jj_consume_token(REPLACE);
        break;
      case ROW:
        t = jj_consume_token(ROW);
        break;
      case STATEMENT:
        t = jj_consume_token(STATEMENT);
        break;
      case TRIGGER:
        t = jj_consume_token(TRIGGER);
        break;
      case EXISTS:
        t = jj_consume_token(EXISTS);
        break;
      case FOREIGN:
        t = jj_consume_token(FOREIGN);
        break;
      case REFERENCES:
        t = jj_consume_token(REFERENCES);
        break;
      case INDEX:
        t = jj_consume_token(INDEX);
        break;
      case USING:
        t = jj_consume_token(USING);
        break;
      case PARALLEL:
        t = jj_consume_token(PARALLEL);
        break;
      case LOCAL:
        t = jj_consume_token(LOCAL);
        break;
      default:
        jj_la1[176] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        el.addString(t.image);
    } else {
      ;
    }
                {if (true) return el;}
    throw new Error("Missing return statement in function");
  }

/**

<FOREIGN: "FOREIGN">	|
	<REFERENCES: "REFERENCES">	|
**/
  final public Token funcSpaceElement() throws ParseException {
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    case FROM:
      t = jj_consume_token(FROM);
      break;
    case INTO:
      t = jj_consume_token(INTO);
      break;
    case WHERE:
      t = jj_consume_token(WHERE);
      break;
    case OR:
      t = jj_consume_token(OR);
      break;
    case AND:
      t = jj_consume_token(AND);
      break;
    case LIKE:
      t = jj_consume_token(LIKE);
      break;
    case ESCAPE:
      t = jj_consume_token(ESCAPE);
      break;
    case LEFT:
      t = jj_consume_token(LEFT);
      break;
    case RIGHT:
      t = jj_consume_token(RIGHT);
      break;
    case NATURAL:
      t = jj_consume_token(NATURAL);
      break;
    case INNER:
      t = jj_consume_token(INNER);
      break;
    case OUTER:
      t = jj_consume_token(OUTER);
      break;
    case FULL:
      t = jj_consume_token(FULL);
      break;
    case JOIN:
      t = jj_consume_token(JOIN);
      break;
    case CROSS:
      t = jj_consume_token(CROSS);
      break;
    case SET:
      t = jj_consume_token(SET);
      break;
    case VALUES:
      t = jj_consume_token(VALUES);
      break;
    case GROUP:
      t = jj_consume_token(GROUP);
      break;
    case BY:
      t = jj_consume_token(BY);
      break;
    case HAVING:
      t = jj_consume_token(HAVING);
      break;
    case ORDER:
      t = jj_consume_token(ORDER);
      break;
    case OFFSET:
      t = jj_consume_token(OFFSET);
      break;
    case ON:
      t = jj_consume_token(ON);
      break;
    case LIMIT:
      t = jj_consume_token(LIMIT);
      break;
    case ASC:
      t = jj_consume_token(ASC);
      break;
    case DESC:
      t = jj_consume_token(DESC);
      break;
    case SQL_NOT:
      t = jj_consume_token(SQL_NOT);
      break;
    case AS:
      t = jj_consume_token(AS);
      break;
    case DISTINCT:
      t = jj_consume_token(DISTINCT);
      break;
    case IN:
      t = jj_consume_token(IN);
      break;
    case BETWEEN:
      t = jj_consume_token(BETWEEN);
      break;
    case IS:
      t = jj_consume_token(IS);
      break;
    case ADD:
      t = jj_consume_token(ADD);
      break;
    case PROCEDURE:
      t = jj_consume_token(PROCEDURE);
      break;
    case EXECUTE:
      t = jj_consume_token(EXECUTE);
      break;
    case AFTER:
      t = jj_consume_token(AFTER);
      break;
    case BEFORE:
      t = jj_consume_token(BEFORE);
      break;
    case CHECK:
      t = jj_consume_token(CHECK);
      break;
    case RETURNS:
      t = jj_consume_token(RETURNS);
      break;
    case EACH:
      t = jj_consume_token(EACH);
      break;
    case SETOF:
      t = jj_consume_token(SETOF);
      break;
    case LANGUAGE:
      t = jj_consume_token(LANGUAGE);
      break;
    case REPLACE:
      t = jj_consume_token(REPLACE);
      break;
    case ROW:
      t = jj_consume_token(ROW);
      break;
    case STATEMENT:
      t = jj_consume_token(STATEMENT);
      break;
    case TRIGGER:
      t = jj_consume_token(TRIGGER);
      break;
    case EXISTS:
      t = jj_consume_token(EXISTS);
      break;
    case FOREIGN:
      t = jj_consume_token(FOREIGN);
      break;
    case REFERENCES:
      t = jj_consume_token(REFERENCES);
      break;
    case RENAME:
      t = jj_consume_token(RENAME);
      break;
    case INDEX:
      t = jj_consume_token(INDEX);
      break;
    case USING:
      t = jj_consume_token(USING);
      break;
    case PARALLEL:
      t = jj_consume_token(PARALLEL);
      break;
    default:
      jj_la1[177] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token funcNameElement() throws ParseException {
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    case FROM:
      t = jj_consume_token(FROM);
      break;
    case INTO:
      t = jj_consume_token(INTO);
      break;
    case WHERE:
      t = jj_consume_token(WHERE);
      break;
    case OR:
      t = jj_consume_token(OR);
      break;
    case AND:
      t = jj_consume_token(AND);
      break;
    case LIKE:
      t = jj_consume_token(LIKE);
      break;
    case ESCAPE:
      t = jj_consume_token(ESCAPE);
      break;
    case LEFT:
      t = jj_consume_token(LEFT);
      break;
    case RIGHT:
      t = jj_consume_token(RIGHT);
      break;
    case NATURAL:
      t = jj_consume_token(NATURAL);
      break;
    case INNER:
      t = jj_consume_token(INNER);
      break;
    case OUTER:
      t = jj_consume_token(OUTER);
      break;
    case FULL:
      t = jj_consume_token(FULL);
      break;
    case JOIN:
      t = jj_consume_token(JOIN);
      break;
    case CROSS:
      t = jj_consume_token(CROSS);
      break;
    case SET:
      t = jj_consume_token(SET);
      break;
    case VALUES:
      t = jj_consume_token(VALUES);
      break;
    case GROUP:
      t = jj_consume_token(GROUP);
      break;
    case BY:
      t = jj_consume_token(BY);
      break;
    case HAVING:
      t = jj_consume_token(HAVING);
      break;
    case ORDER:
      t = jj_consume_token(ORDER);
      break;
    case OFFSET:
      t = jj_consume_token(OFFSET);
      break;
    case ON:
      t = jj_consume_token(ON);
      break;
    case LIMIT:
      t = jj_consume_token(LIMIT);
      break;
    case ASC:
      t = jj_consume_token(ASC);
      break;
    case DESC:
      t = jj_consume_token(DESC);
      break;
    case SQL_NOT:
      t = jj_consume_token(SQL_NOT);
      break;
    case AS:
      t = jj_consume_token(AS);
      break;
    case DISTINCT:
      t = jj_consume_token(DISTINCT);
      break;
    case IN:
      t = jj_consume_token(IN);
      break;
    case BETWEEN:
      t = jj_consume_token(BETWEEN);
      break;
    case IS:
      t = jj_consume_token(IS);
      break;
    case ADD:
      t = jj_consume_token(ADD);
      break;
    case PROCEDURE:
      t = jj_consume_token(PROCEDURE);
      break;
    case EXECUTE:
      t = jj_consume_token(EXECUTE);
      break;
    case AFTER:
      t = jj_consume_token(AFTER);
      break;
    case BEFORE:
      t = jj_consume_token(BEFORE);
      break;
    case CHECK:
      t = jj_consume_token(CHECK);
      break;
    case RETURNS:
      t = jj_consume_token(RETURNS);
      break;
    case EACH:
      t = jj_consume_token(EACH);
      break;
    case SETOF:
      t = jj_consume_token(SETOF);
      break;
    case LANGUAGE:
      t = jj_consume_token(LANGUAGE);
      break;
    case REPLACE:
      t = jj_consume_token(REPLACE);
      break;
    case ROW:
      t = jj_consume_token(ROW);
      break;
    case STATEMENT:
      t = jj_consume_token(STATEMENT);
      break;
    case TRIGGER:
      t = jj_consume_token(TRIGGER);
      break;
    case EXISTS:
      t = jj_consume_token(EXISTS);
      break;
    case FOREIGN:
      t = jj_consume_token(FOREIGN);
      break;
    case REFERENCES:
      t = jj_consume_token(REFERENCES);
      break;
    case DELETE:
      t = jj_consume_token(DELETE);
      break;
    case SELECT:
      t = jj_consume_token(SELECT);
      break;
    case UPDATE:
      t = jj_consume_token(UPDATE);
      break;
    case INSERT:
      t = jj_consume_token(INSERT);
      break;
    case RENAME:
      t = jj_consume_token(RENAME);
      break;
    case INDEX:
      t = jj_consume_token(INDEX);
      break;
    case USING:
      t = jj_consume_token(USING);
      break;
    default:
      jj_la1[178] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_3R_219() {
    if (jj_3R_237()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_238()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(REDIRECT)) return true;
    if (jj_3R_69()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_scan_token(MINUS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_3R_60()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) return true;
    }
    return false;
  }

  final private boolean jj_3R_218() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    if (jj_3R_237()) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(PARALLEL)) return true;
    if (jj_scan_token(L_PARENTHESIS)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(SQL_NOT)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_240() {
    if (jj_3R_194()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3R_239() {
    if (jj_scan_token(L_PARENTHESIS)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3R_240()) return true;
    }
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_133()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3_41()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_131()) return true;
    return false;
  }

  final private boolean jj_3R_260() {
    if (jj_3R_194()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_129()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_259() {
    if (jj_3R_260()) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(L_PARENTHESIS)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_scan_token(L_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_154()) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_3R_193()) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_3R_192()) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_3R_153()) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_3R_190()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_3R_191()) return true;
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_scan_token(MODULO)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_3R_152()) return true;
    return false;
  }

  final private boolean jj_3R_258() {
    if (jj_scan_token(L_PARENTHESIS)) return true;
    return false;
  }

  final private boolean jj_3R_257() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_258()) {
    jj_scanpos = xsp;
    if (jj_3R_259()) return true;
    }
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_3R_189()) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) return true;
    }
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_3R_188()) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_3R_186()) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_3R_187()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(DROP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_3R_231()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_232()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_3R_143()) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_197()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_3R_142()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_140()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_3R_139()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_138()) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    return false;
  }

  final private boolean jj_3R_250() {
    if (jj_3R_257()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_137()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_scan_token(L_PARENTHESIS)) return true;
    if (jj_3R_162()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_3R_202()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_203()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_42()) return true;
    if (jj_scan_token(SEMI_COLON)) return true;
    return false;
  }

  final private boolean jj_3R_206() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) return true;
    }
    return false;
  }

  final private boolean jj_3R_173() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_206()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_scan_token(WHERE)) return true;
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_3R_250()) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_3R_167()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_168()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(L_PARENTHESIS)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_3R_241()) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_scan_token(ALTER)) return true;
    if (jj_scan_token(TABLE)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_3R_194()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_41()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_scan_token(CROSS)) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_3R_233()) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_scan_token(NATURAL)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_101()) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_scan_token(TRIGGER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_217()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_scan_token(RIGHT)) return true;
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_scan_token(LEFT)) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_3R_204()) return true;
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_scan_token(INNER)) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_3R_169()) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_scan_token(JOIN)) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_3R_199()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_200()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    }
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(INSERT)) return true;
    if (jj_scan_token(INTO)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_236() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_3R_162()) return true;
    return false;
  }

  final private boolean jj_3_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    }
    }
    }
    }
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_236()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_3R_159()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_scan_token(LOGICAL_AND)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_scan_token(SET)) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_scan_token(TRIGGER)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_3R_105()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_106()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_scan_token(LOGICAL_OR)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(UPDATE)) return true;
    if (jj_3R_99()) return true;
    if (jj_3R_184()) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_scan_token(L_PARENTHESIS)) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_3R_205()) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_3R_164()) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(FROM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) return true;
    }
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_scan_token(ADJUST_WHERE)) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_scan_token(INTO)) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(REPLACE)) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_216()) jj_scanpos = xsp;
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  final private boolean jj_3_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_scan_token(TABLE)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(L_PARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_171()) jj_scanpos = xsp;
    if (jj_scan_token(SEMI_COLON)) return true;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_235()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) return true;
    }
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(R_PARENTHESIS)) return true;
    if (jj_scan_token(L_BRACE)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(CHECK)) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_3R_230()) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(L_PARENTHESIS)) return true;
    if (jj_3R_170()) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_scan_token(GROUP)) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_104()) return true;
    if (jj_scan_token(L_PARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_201()) jj_scanpos = xsp;
    if (jj_scan_token(R_PARENTHESIS)) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_scan_token(L_PARENTHESIS)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_164()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(NUMERIC)) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(159)) {
    jj_scanpos = xsp;
    if (jj_scan_token(163)) return true;
    }
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(AT_MARK)) return true;
    if (jj_3R_159()) return true;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(L_PARENTHESIS)) return true;
    if (jj_3R_170()) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_3R_159()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_3R_198()) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(L_PARENTHESIS)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_3R_208()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) jj_scanpos = xsp;
    if (jj_scan_token(L_BRACE)) return true;
    if (jj_3R_173()) return true;
    if (jj_scan_token(R_BRACE)) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_scan_token(OFFSET)) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_3R_214()) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_scan_token(ORDER)) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_3R_207()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) return true;
    }
    if (jj_3R_159()) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(L_PARENTHESIS)) return true;
    if (jj_3R_60()) return true;
    if (jj_scan_token(R_PARENTHESIS)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_127()) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_scan_token(LIMIT)) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_211()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_212()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_3R_213()) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) return true;
    }
    }
    }
    }
    }
    if (jj_3R_121()) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_scan_token(TABLE)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_3R_70()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) jj_scanpos = xsp;
    if (jj_3R_160()) return true;
    if (jj_scan_token(L_PARENTHESIS)) return true;
    xsp = jj_scanpos;
    if (jj_3R_161()) jj_scanpos = xsp;
    if (jj_scan_token(R_PARENTHESIS)) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_3R_210()) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    xsp = jj_scanpos;
    if (jj_3_31()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    }
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_scan_token(INDEX)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_209()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    xsp = jj_scanpos;
    if (jj_3R_176()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_178()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_180()) jj_scanpos = xsp;
    if (jj_3R_181()) return true;
    xsp = jj_scanpos;
    if (jj_3R_182()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_256() {
    if (jj_scan_token(BOOL)) return true;
    if (jj_scan_token(L_PARENTHESIS)) return true;
    if (jj_3R_170()) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(PREPARED)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(PREPARED)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_scan_token(INDEX)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_252() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(ROLLBACK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_175()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_254() {
    if (jj_scan_token(NUMERIC)) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(BETWEEN)) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_97()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_scan_token(USE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_253() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(159)) {
    jj_scanpos = xsp;
    if (jj_scan_token(163)) return true;
    }
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_3R_65()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_66()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(PREPARE)) return true;
    if (jj_scan_token(TRANSACTION)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(L_PARENTHESIS)) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_scan_token(TRANSACTION)) return true;
    if (jj_scan_token(ISOLATION)) return true;
    return false;
  }

  final private boolean jj_3R_255() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(BEGIN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_scan_token(LOCAL)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_251() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) return true;
    }
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(IN)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_249() {
    if (jj_3R_256()) return true;
    return false;
  }

  final private boolean jj_3R_248() {
    if (jj_3R_255()) return true;
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_3R_254()) return true;
    return false;
  }

  final private boolean jj_3R_246() {
    if (jj_3R_253()) return true;
    return false;
  }

  final private boolean jj_3R_238() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    return false;
  }

  final private boolean jj_3R_245() {
    if (jj_3R_252()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(IS)) return true;
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_scan_token(DOWNLOAD)) return true;
    if (jj_3R_69()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_185()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_3R_251()) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) {
    jj_scanpos = xsp;
    if (jj_3R_245()) {
    jj_scanpos = xsp;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) {
    jj_scanpos = xsp;
    if (jj_3R_249()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_113()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_112()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_111()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(TRY)) return true;
    if (jj_scan_token(L_BRACE)) return true;
    if (jj_3R_173()) return true;
    if (jj_scan_token(R_BRACE)) return true;
    return false;
  }

  public AlinousScriptParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[179];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
      jj_la1_5();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x84005000,0x84005000,0x0,0x84000000,0x84000000,0x10000000,0x84000000,0x84005000,0x0,0x0,0x0,0x0,0x84005000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x84000000,0x10000000,0x0,0x0,0x0,0x0,0x4000000,0x0,0x400000,0x0,0x10000000,0x400000,0x0,0x400800,0x400000,0x10000000,0x8000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x400000,0x84400800,0x60000400,0x0,0x10000000,0x0,0x0,0x0,0x60000400,0x0,0x84400800,0x31a800,0x400000,0x8000000,0x8000000,0x0,0x0,0x84400000,0x84400800,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x400000,0x10000000,0x10000000,0x10000000,0x0,0xa000,0xa000,0x10800,0x10800,0x20000,0x84405000,0x5000,0x5000,0x5000,0x84005000,0x84000000,0x0,0x0,0x84405000,0x10000000,0x84000000,0x400000,0x0,0x84005000,0x84405000,0x84005000,0x0,0x84405000,0x2000,0x8000,0x800,0x10000,0x20000,0x84405000,0x10000000,0x10000000,0x10000000,0x0,0x10000000,0x0,0x10000000,0x0,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x400000,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x84400800,0x0,0x10000000,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9000000,0x9000000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0xfffffc00,0x7ffffc00,0x0,0x0,0x0,0x0,0x0,0xfffffc00,0x80000000,0x20000,0x0,0x0,0x7ffffc00,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x8000,0x10000,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7ffffc00,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x2000000,0x0,0x600000,0x2000000,0x600000,0x0,0x19e00000,0x19e00000,0x0,0x0,0x7ffffc00,0x800f0,0x0,0x0,0x400,0x0,0x0,0x800f0,0x100000,0x7ffffc00,0x0,0x7ffffc00,0x0,0x0,0x200,0x0,0x7ffffc00,0x7ffffc00,0x7ffffc00,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7ffffc00,0x0,0x0,0x0,0x7ffffc00,0x7ffffc00,0x0,0x0,0x7ffffc00,0x0,0x0,0x0,0x0,0x7ffffc00,0x7ffffd00,0x7ffffc00,0xfc,0x7ffffd00,0x0,0x0,0x0,0x0,0x0,0x7ffffc00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x20000,0x3800,0x0,0x0,0x7ffffc00,0x3800,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffffc00,0xfffffc00,0x7fffc000,0x7ffffc00,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x7d1f1ffe,0x7d1f1ffe,0x0,0x0,0x0,0x0,0x0,0x7d1f1ffe,0x0,0x80000000,0x80000000,0x8180000,0x70071ffe,0x0,0x0,0x0,0x0,0x0,0x200000,0x5000000,0x2000000,0x2000000,0x0,0x0,0x0,0x2,0x10,0x0,0x0,0x2000,0x8000,0x4000,0x80,0x100,0x60,0x60,0x60,0x60,0x60,0x60,0x0,0x0,0x60,0x60,0x60,0x60,0x0,0x8,0x0,0x800,0x0,0x0,0x800,0x71ffe,0x0,0x0,0x0,0x0,0x800,0x200,0x0,0x200,0x0,0x200,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x71ffe,0x70000,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x71ffe,0x0,0x71ffe,0x0,0x0,0x0,0x0,0x71ffe,0x71ffe,0x71ffe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x71ffe,0x0,0x0,0x0,0x71ffe,0x71ffe,0x0,0x0,0x71ffe,0x0,0x0,0x0,0x1,0x7d1f1ffe,0x71ffe,0x7d1f1ffe,0x0,0x71ffe,0x0,0x0,0x0,0x0,0x0,0x71ffe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x71ffe,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x7fff1fff,0x7fff1fff,0x71ffe,0x71ffe,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0xf3ffff06,0xf3ffff06,0x0,0x0,0x0,0x0,0x0,0xf3ffff06,0x0,0x202000,0x202000,0x0,0xf3ffff06,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffff02,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x83ffff02,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x83ffff02,0x0,0x3ffff02,0x0,0x0,0x0,0x0,0x83ffff02,0x83ffff02,0x3ffff02,0x0,0x30000000,0x30000000,0x0,0x8000000,0x4000000,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf3ffff06,0x0,0x0,0x0,0xf3ffff06,0xf3ffff06,0x30000000,0x0,0xf3ffff06,0x0,0x0,0x0,0x0,0xf3ffff06,0xf3ffff06,0xf3ffff06,0x0,0xf3ffff06,0x0,0x0,0x0,0x0,0x0,0xf3ffff06,0x0,0x0,0x0,0x4000,0x0,0x100,0x0,0x10000a0,0x0,0x0,0x81,0x81,0x100,0x200000,0x0,0x0,0x0,0x200000,0x400,0xc00000,0xc00000,0x0,0x0,0x30000,0x30000,0x83ffff02,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x6,0x8,0x8,0x0,0x0,0x0,0x3ffff7e,0x3ffff7e,0x3ffff06,0x3ffff06,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0xe000,0xe000,0x807f19fe,0x807e18c6,0x1,0x0,0x0,0x0,0x0,0x807f19fe,0x50138,0x1,0x1,0x0,0x807e08c4,0x50138,0x200,0x400,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x100000,0x0,0x0,0x100000,0x0,0x100000,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x80300000,0x0,0x0,0x0,0x0,0x100000,0x100000,0x0,0x0,0x80300000,0x0,0x100000,0x0,0x0,0x0,0x80000000,0x80300000,0x80300000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x80740000,0x0,0x0,0x0,0x80740000,0x80740000,0x0,0x80000000,0x80740000,0x0,0x0,0x0,0x0,0x807e18c6,0x80740000,0x807e18c6,0x0,0x80740000,0x0,0x0,0x0,0x0,0x0,0x80740000,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80300000,0x0,0x0,0x0,0x0,0x100000,0x0,0x100000,0x0,0x0,0x0,0x100000,0x0,0x0,0x1c0000,0x1c0000,0x140000,0x100000,};
   }
   private static void jj_la1_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x8,0x8,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x8,0x8,0x8,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[41];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public AlinousScriptParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public AlinousScriptParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AlinousScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 179; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 179; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public AlinousScriptParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AlinousScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 179; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 179; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public AlinousScriptParser(AlinousScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 179; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(AlinousScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 179; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L; }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[168];
    for (int i = 0; i < 168; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 179; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 168; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 41; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
